
testspii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f7  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fa  00000000  00000000  000009df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030a  00000000  00000000  000010d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  000017e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "main.h"
#include "registers.h"

int main(void)
{
	SPI_init_master();
  80:	0e 94 4b 00 	call	0x96	; 0x96 <SPI_init_master>
	
	uint8_t G_X_L = SPIRead(PINB1, OUT_X_L_G);
  84:	68 e1       	ldi	r22, 0x18	; 24
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 52 00 	call	0xa4	; 0xa4 <SPIRead>
	uint8_t G_X_H = SPIRead(PINB1, OUT_X_H_G);
  8c:	69 e1       	ldi	r22, 0x19	; 25
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	0e 94 52 00 	call	0xa4	; 0xa4 <SPIRead>
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0x14>

00000096 <SPI_init_master>:
#include <avr/io.h>
#define read 0b10000000
#define write 0b00000000

void SPI_init_master(void){
	DDRB = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1);		// MOSI, SCK, CS_M and CS_AG output
  96:	8e e2       	ldi	r24, 0x2E	; 46
  98:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<PORTB4)|(1<<PORTB2)|(1<<PORTB1);		// pullup on MISO and ~SS not active/high
  9a:	86 e1       	ldi	r24, 0x16	; 22
  9c:	85 b9       	out	0x05, r24	; 5
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);				// SPI enable, Master, Clockdiv 16
  9e:	81 e5       	ldi	r24, 0x51	; 81
  a0:	8c bd       	out	0x2c, r24	; 44
  a2:	08 95       	ret

000000a4 <SPIRead>:
}

uint8_t SPIRead(uint8_t csPin, uint8_t subAddress){
	uint8_t temp = 0;
	PORTB &= ~(1<<csPin);				// start SPI conversation
  a4:	95 b1       	in	r25, 0x05	; 5
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <SPIRead+0xc>
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <SPIRead+0x8>
  b4:	82 2f       	mov	r24, r18
  b6:	80 95       	com	r24
  b8:	98 23       	and	r25, r24
  ba:	95 b9       	out	0x05, r25	; 5
	SPDR = 0x80 | (subAddress & 0x3f);	// reads from subadress
  bc:	6f 73       	andi	r22, 0x3F	; 63
  be:	60 68       	ori	r22, 0x80	; 128
  c0:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF))){} 		// wait for transfer to complete
  c2:	0d b4       	in	r0, 0x2d	; 45
  c4:	07 fe       	sbrs	r0, 7
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <SPIRead+0x1e>
	temp = SPDR;
  c8:	8e b5       	in	r24, 0x2e	; 46
	PORTB = (1<<csPin);					// end transmission
  ca:	25 b9       	out	0x05, r18	; 5
	return temp;
}
  cc:	08 95       	ret

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
