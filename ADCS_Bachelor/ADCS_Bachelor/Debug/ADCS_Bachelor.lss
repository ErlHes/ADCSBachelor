
ADCS_Bachelor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  00000776  000007ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000776  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e69  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c96  00000000  00000000  00002979  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dc0  00000000  00000000  0000360f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000498  00000000  00000000  000043d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000086f  00000000  00000000  00004868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001477  00000000  00000000  000050d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  0000654e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3e       	cpi	r26, 0xEC	; 236
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8e:	0c 94 b9 03 	jmp	0x772	; 0x772 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <readGyro>:
	else temp |= (1<<4);
	
	SPIwriteByte(PIN_XG, CTRL_REG8, temp);
}

int16_t readGyro(uint8_t axis_address){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <readGyro+0x6>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp[2];
	SPIreadBytes(PIN_XG, axis_address, temp, 2);
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	ae 01       	movw	r20, r28
  a4:	4f 5f       	subi	r20, 0xFF	; 255
  a6:	5f 4f       	sbci	r21, 0xFF	; 255
  a8:	68 2f       	mov	r22, r24
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPIreadBytes>
	int16_t g = (temp[1] << 8 | temp[0]);
  b0:	8a 81       	ldd	r24, Y+2	; 0x02
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	98 2f       	mov	r25, r24
  b6:	88 27       	eor	r24, r24
  b8:	29 81       	ldd	r18, Y+1	; 0x01
	return g;
}
  ba:	82 2b       	or	r24, r18
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <main>:
#define UBRR_VALUE ((F_CPU / (BAUDRATE * 16UL)) - 1 )


int main(void)
{
	initUSART();
  c6:	0e 94 a2 01 	call	0x344	; 0x344 <initUSART>
	spiInit();
  ca:	0e 94 ef 00 	call	0x1de	; 0x1de <spiInit>
	printString("\r\nStarting connection test, please wait...");
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 bb 01 	call	0x376	; 0x376 <printString>
	printString("\r\nIf the program holds here, check your connections.");
  d6:	8b e2       	ldi	r24, 0x2B	; 43
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 bb 01 	call	0x376	; 0x376 <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	83 ed       	ldi	r24, 0xD3	; 211
  e2:	90 e3       	ldi	r25, 0x30	; 48
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x1e>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x28>
  ee:	00 00       	nop
	_delay_ms(1000);
	WhoAmICheck();
  f0:	0e 94 46 01 	call	0x28c	; 0x28c <WhoAmICheck>

	uint8_t testbyte = 0x00;
	uint8_t testbyte2 = 0x00;

	testbyte = SPIreadByte(PIN_XG, CTRL_REG4);
  f4:	6e e1       	ldi	r22, 0x1E	; 30
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 36 01 	call	0x26c	; 0x26c <SPIreadByte>
  fc:	c8 2f       	mov	r28, r24
	printString("\r\nReading data from CTRL_REG4 (Expecting 56): ");
  fe:	80 e6       	ldi	r24, 0x60	; 96
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	0e 94 bb 01 	call	0x376	; 0x376 <printString>
	printByte(testbyte);
 106:	8c 2f       	mov	r24, r28
 108:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <printByte>
	printString("");
 10c:	8e eb       	ldi	r24, 0xBE	; 190
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 bb 01 	call	0x376	; 0x376 <printString>

	testbyte2 = SPIreadByte(PIN_M, CTRL_REG3_M);
 114:	62 e2       	ldi	r22, 0x22	; 34
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 36 01 	call	0x26c	; 0x26c <SPIreadByte>
 11c:	c8 2f       	mov	r28, r24
	printString("\r\nReading data from CTRL_REG3_M (Expecting 3): ");
 11e:	8f e8       	ldi	r24, 0x8F	; 143
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 bb 01 	call	0x376	; 0x376 <printString>
	printByte(testbyte2);
 126:	8c 2f       	mov	r24, r28
 128:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <printByte>
	printString("");
 12c:	8e eb       	ldi	r24, 0xBE	; 190
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 bb 01 	call	0x376	; 0x376 <printString>

	float gx;
	float gy;
	float gz;

	initMag();
 134:	0e 94 d5 00 	call	0x1aa	; 0x1aa <initMag>
	initGyro();
 138:	0e 94 ae 00 	call	0x15c	; 0x15c <initGyro>
	while(1){

		int16_t temp = 0;
		temp = readGyro(OUT_X_L_G);
 13c:	88 e1       	ldi	r24, 0x18	; 24
 13e:	0e 94 4b 00 	call	0x96	; 0x96 <readGyro>
		gx = calcGyro(temp);
 142:	0e 94 c8 00 	call	0x190	; 0x190 <calcGyro>

		temp = readGyro(OUT_Y_L_G);
 146:	8a e1       	ldi	r24, 0x1A	; 26
 148:	0e 94 4b 00 	call	0x96	; 0x96 <readGyro>
		gy = calcGyro(temp);
 14c:	0e 94 c8 00 	call	0x190	; 0x190 <calcGyro>

		temp = readGyro(OUT_Z_L_G);
 150:	8c e1       	ldi	r24, 0x1C	; 28
 152:	0e 94 4b 00 	call	0x96	; 0x96 <readGyro>
		gz = calcGyro(temp);
 156:	0e 94 c8 00 	call	0x190	; 0x190 <calcGyro>
 15a:	f0 cf       	rjmp	.-32     	; 0x13c <main+0x76>

0000015c <initGyro>:
		}
	return temp;
}


void calibGyro(void){
 15c:	40 ec       	ldi	r20, 0xC0	; 192
 15e:	60 e1       	ldi	r22, 0x10	; 16
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 84 01 	call	0x308	; 0x308 <SPIwriteByte>
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	61 e1       	ldi	r22, 0x11	; 17
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 84 01 	call	0x308	; 0x308 <SPIwriteByte>
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	62 e1       	ldi	r22, 0x12	; 18
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 84 01 	call	0x308	; 0x308 <SPIwriteByte>
 17a:	48 e3       	ldi	r20, 0x38	; 56
 17c:	6e e1       	ldi	r22, 0x1E	; 30
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 84 01 	call	0x308	; 0x308 <SPIwriteByte>
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	63 e1       	ldi	r22, 0x13	; 19
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 84 01 	call	0x308	; 0x308 <SPIwriteByte>
 18e:	08 95       	ret

00000190 <calcGyro>:
 190:	bc 01       	movw	r22, r24
 192:	99 0f       	add	r25, r25
 194:	88 0b       	sbc	r24, r24
 196:	99 0b       	sbc	r25, r25
 198:	0e 94 b1 02 	call	0x562	; 0x562 <__floatsisf>
 19c:	29 e2       	ldi	r18, 0x29	; 41
 19e:	3c e5       	ldi	r19, 0x5C	; 92
 1a0:	4f e0       	ldi	r20, 0x0F	; 15
 1a2:	5c e3       	ldi	r21, 0x3C	; 60
 1a4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__mulsf3>
 1a8:	08 95       	ret

000001aa <initMag>:
		bit 0:		self-test enable */	
	//	Default CTRL_REG1_M = 0x10
	if(magTempCompensationEnable){tempRegValue = (1<<7);}
	tempRegValue |= (magXYPerformance & 0x3) << 5;
	tempRegValue |= (magSampleRate & 0x7) << 2;
	SPIwriteByte(PIN_M, CTRL_REG1_M, tempRegValue);
 1aa:	4c e7       	ldi	r20, 0x7C	; 124
 1ac:	60 e2       	ldi	r22, 0x20	; 32
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	0e 94 84 01 	call	0x308	; 0x308 <SPIwriteByte>
		case 16:
		tempRegValue |= (0x3 << 5);
		break;
		// Otherwise we'll default to 4 gauss (00)
	}
	SPIwriteByte(PIN_M, CTRL_REG2_M, tempRegValue);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	61 e2       	ldi	r22, 0x21	; 33
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	0e 94 84 01 	call	0x308	; 0x308 <SPIwriteByte>
		rest:		always 0 */
	//	Default CTRL_REG3_M = 0x03
	tempRegValue = 0;
	if(magLowPowerEnable){ tempRegValue = (1<<5);}
	tempRegValue |= (magOperatingMode & 0x3);
	SPIwriteByte(PIN_M, CTRL_REG3_M, tempRegValue);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	62 e2       	ldi	r22, 0x22	; 34
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 84 01 	call	0x308	; 0x308 <SPIwriteByte>
		bit 1:		Endian data selection
		rest:		always 0 */
	//	Default CTRL_REG4_M = 0x00
	tempRegValue = 0;
	tempRegValue = (magZPerformance & 0x3) << 2;
	SPIwriteByte(PIN_M, CTRL_REG4_M, tempRegValue);
 1c8:	4c e0       	ldi	r20, 0x0C	; 12
 1ca:	63 e2       	ldi	r22, 0x23	; 35
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 84 01 	call	0x308	; 0x308 <SPIwriteByte>
		bit 7:	fast read enable
		bit 6:	block data update for magnetic data
		rest:	always 0 */
	//	Default CTRL_REG5_M = 0x00
	tempRegValue = 0;
	SPIwriteByte(PIN_M, CTRL_REG5_M, tempRegValue);
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	64 e2       	ldi	r22, 0x24	; 36
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	0e 94 84 01 	call	0x308	; 0x308 <SPIwriteByte>
 1dc:	08 95       	ret

000001de <spiInit>:
#include <stdio.h>
#include "header.h"
#include "registers.h"

void spiInit(void){
	DDRB = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);			// MOSI, SCK, CS_M and CS_AG output ||DDB0 is for testing
 1de:	8f e2       	ldi	r24, 0x2F	; 47
 1e0:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<PORTB2)|(1<<PORTB1)|(1<<PORTB0);						// CS_M and CS_AG start HIGH || PORTB0 is for testing
 1e2:	87 e0       	ldi	r24, 0x07	; 7
 1e4:	85 b9       	out	0x05, r24	; 5
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)|(1<<SPR1)|(1<<SPR0);	// * SPI enable, Master mode, MSB first, Clockdiv 128
 1e6:	8f e5       	ldi	r24, 0x5F	; 95
 1e8:	8c bd       	out	0x2c, r24	; 44
 1ea:	08 95       	ret

000001ec <spiTransfer>:
	
	return count;
}

uint8_t spiTransfer(uint8_t data) {
    SPDR = data;
 1ec:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
 1ee:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
 1f0:	0d b4       	in	r0, 0x2d	; 45
 1f2:	07 fe       	sbrs	r0, 7
 1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <spiTransfer+0x4>
    return SPDR;
 1f6:	8e b5       	in	r24, 0x2e	; 46
  }
 1f8:	08 95       	ret

000001fa <SPIreadBytes>:
	return temp;
}

uint8_t SPIreadBytes(uint8_t csPin, uint8_t subAddress,
uint8_t * dest, uint8_t count)
{
 1fa:	df 92       	push	r13
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	8a 01       	movw	r16, r20
 20a:	d2 2e       	mov	r13, r18
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 20c:	6f 73       	andi	r22, 0x3F	; 63
 20e:	60 68       	ori	r22, 0x80	; 128
	// Mag SPI port is different. If we're reading multiple bytes,
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == PIN_M) && count > 1)
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	21 f4       	brne	.+8      	; 0x21c <SPIreadBytes+0x22>
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	92 17       	cp	r25, r18
 218:	08 f4       	brcc	.+2      	; 0x21c <SPIreadBytes+0x22>
	rAddress |= 0x40;
 21a:	60 64       	ori	r22, 0x40	; 64
	
	PORTB &= ~(1<<csPin);	// Initiate communication
 21c:	95 b1       	in	r25, 0x05	; 5
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	79 01       	movw	r14, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <SPIreadBytes+0x30>
 226:	ee 0c       	add	r14, r14
 228:	ff 1c       	adc	r15, r15
 22a:	8a 95       	dec	r24
 22c:	e2 f7       	brpl	.-8      	; 0x226 <SPIreadBytes+0x2c>
 22e:	8e 2d       	mov	r24, r14
 230:	80 95       	com	r24
 232:	89 23       	and	r24, r25
 234:	85 b9       	out	0x05, r24	; 5
	spiTransfer(rAddress);
 236:	86 2f       	mov	r24, r22
 238:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spiTransfer>
	for (int i=0; i<count; i++)
 23c:	dd 20       	and	r13, r13
 23e:	51 f0       	breq	.+20     	; 0x254 <SPIreadBytes+0x5a>
 240:	e8 01       	movw	r28, r16
 242:	0d 0d       	add	r16, r13
 244:	11 1d       	adc	r17, r1
	{
		dest[i] = spiTransfer(0x00); // Read into destination array
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spiTransfer>
 24c:	89 93       	st	Y+, r24
	if ((csPin == PIN_M) && count > 1)
	rAddress |= 0x40;
	
	PORTB &= ~(1<<csPin);	// Initiate communication
	spiTransfer(rAddress);
	for (int i=0; i<count; i++)
 24e:	c0 17       	cp	r28, r16
 250:	d1 07       	cpc	r29, r17
 252:	c9 f7       	brne	.-14     	; 0x246 <SPIreadBytes+0x4c>
	{
		dest[i] = spiTransfer(0x00); // Read into destination array
	}
	PORTB |= (1<<csPin); // Close communication
 254:	85 b1       	in	r24, 0x05	; 5
 256:	e8 2a       	or	r14, r24
 258:	e5 b8       	out	0x05, r14	; 5
	
	return count;
}
 25a:	8d 2d       	mov	r24, r13
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	df 90       	pop	r13
 26a:	08 95       	ret

0000026c <SPIreadByte>:
																		// * Clock idle HIGH, Data Captured on Rising edge. SPI mode 3.
}


uint8_t SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	1f 92       	push	r1
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	// Use the multiple read function to read 1 byte.
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	ae 01       	movw	r20, r28
 27a:	4f 5f       	subi	r20, 0xFF	; 255
 27c:	5f 4f       	sbci	r21, 0xFF	; 255
 27e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPIreadBytes>
	return temp;
}
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	0f 90       	pop	r0
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <WhoAmICheck>:
    asm volatile("nop");
    while (!(SPSR & _BV(SPIF))) ; // wait
    return SPDR;
  }
  
  void WhoAmICheck(void){
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
	  uint8_t testM = 0x00;
	  uint8_t testXG = 0x00;
	  uint16_t whoAmICombined = 0x0000;
	  //spiWrite(PIN_M, CTRL_REG3_M, 0b00000111);		//Needed to read from the Magnetometer registers.
	  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
 290:	6f e0       	ldi	r22, 0x0F	; 15
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 36 01 	call	0x26c	; 0x26c <SPIreadByte>
 298:	c8 2f       	mov	r28, r24
	  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
 29a:	6f e0       	ldi	r22, 0x0F	; 15
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 36 01 	call	0x26c	; 0x26c <SPIreadByte>
	  whoAmICombined = (testXG << 8) | testM;
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
 2a4:	dc 2f       	mov	r29, r28
 2a6:	cc 27       	eor	r28, r28
 2a8:	c8 2b       	or	r28, r24
	  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
 2aa:	8f eb       	ldi	r24, 0xBF	; 191
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 bb 01 	call	0x376	; 0x376 <printString>
	  printWord(whoAmICombined);
 2b2:	ce 01       	movw	r24, r28
 2b4:	0e 94 01 02 	call	0x402	; 0x402 <printWord>
	  while(whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP)){
 2b8:	cd 33       	cpi	r28, 0x3D	; 61
 2ba:	d8 46       	sbci	r29, 0x68	; 104
 2bc:	11 f1       	breq	.+68     	; 0x302 <WhoAmICheck+0x76>
		  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
 2be:	6f e0       	ldi	r22, 0x0F	; 15
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 36 01 	call	0x26c	; 0x26c <SPIreadByte>
 2c6:	c8 2f       	mov	r28, r24
		  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
 2c8:	6f e0       	ldi	r22, 0x0F	; 15
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 36 01 	call	0x26c	; 0x26c <SPIreadByte>
		  whoAmICombined = (testXG << 8) | (testM);
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	d8 2b       	or	r29, r24
		  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
 2d4:	8f eb       	ldi	r24, 0xBF	; 191
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 bb 01 	call	0x376	; 0x376 <printString>
		  printWord(whoAmICombined);
 2dc:	ce 01       	movw	r24, r28
 2de:	0e 94 01 02 	call	0x402	; 0x402 <printWord>
		  printString("");
 2e2:	8e eb       	ldi	r24, 0xBE	; 190
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 bb 01 	call	0x376	; 0x376 <printString>
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	91 ee       	ldi	r25, 0xE1	; 225
 2ee:	24 e0       	ldi	r18, 0x04	; 4
 2f0:	81 50       	subi	r24, 0x01	; 1
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	20 40       	sbci	r18, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <WhoAmICheck+0x64>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <WhoAmICheck+0x6e>
 2fa:	00 00       	nop
	  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
	  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
	  whoAmICombined = (testXG << 8) | testM;
	  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
	  printWord(whoAmICombined);
	  while(whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP)){
 2fc:	cd 33       	cpi	r28, 0x3D	; 61
 2fe:	d8 46       	sbci	r29, 0x68	; 104
 300:	f1 f6       	brne	.-68     	; 0x2be <WhoAmICheck+0x32>
		  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
		  printWord(whoAmICombined);
		  printString("");
		  _delay_ms(100);
	  }
  }
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <SPIwriteByte>:
  
  void SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
  {
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	14 2f       	mov	r17, r20
	  PORTB &= ~(1<<csPin); // Initiate communication
 310:	95 b1       	in	r25, 0x05	; 5
 312:	c1 e0       	ldi	r28, 0x01	; 1
 314:	d0 e0       	ldi	r29, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <SPIwriteByte+0x14>
 318:	cc 0f       	add	r28, r28
 31a:	dd 1f       	adc	r29, r29
 31c:	8a 95       	dec	r24
 31e:	e2 f7       	brpl	.-8      	; 0x318 <SPIwriteByte+0x10>
 320:	8c 2f       	mov	r24, r28
 322:	80 95       	com	r24
 324:	98 23       	and	r25, r24
 326:	95 b9       	out	0x05, r25	; 5
	  
	  // If write, bit 0 (MSB) should be 0
	  // If single write, bit 1 should be 0
	  spiTransfer(subAddress & 0x3F); // Send Address
 328:	86 2f       	mov	r24, r22
 32a:	8f 73       	andi	r24, 0x3F	; 63
 32c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spiTransfer>
	  spiTransfer(data); // Send data
 330:	81 2f       	mov	r24, r17
 332:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spiTransfer>
	  
	  PORTB |= (1<<csPin); // Close communication
 336:	85 b1       	in	r24, 0x05	; 5
 338:	c8 2b       	or	r28, r24
 33a:	c5 b9       	out	0x05, r28	; 5
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	08 95       	ret

00000344 <initUSART>:
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
}
 344:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 348:	87 e6       	ldi	r24, 0x67	; 103
 34a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 34e:	e0 ec       	ldi	r30, 0xC0	; 192
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	8d 7f       	andi	r24, 0xFD	; 253
 356:	80 83       	st	Z, r24
 358:	88 e1       	ldi	r24, 0x18	; 24
 35a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 35e:	86 e0       	ldi	r24, 0x06	; 6
 360:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 364:	08 95       	ret

00000366 <transmitByte>:
 366:	e0 ec       	ldi	r30, 0xC0	; 192
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	90 81       	ld	r25, Z
 36c:	95 ff       	sbrs	r25, 5
 36e:	fd cf       	rjmp	.-6      	; 0x36a <transmitByte+0x4>
 370:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 374:	08 95       	ret

00000376 <printString>:
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	fc 01       	movw	r30, r24
 37e:	80 81       	ld	r24, Z
 380:	88 23       	and	r24, r24
 382:	59 f0       	breq	.+22     	; 0x39a <printString+0x24>
 384:	8f 01       	movw	r16, r30
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	0e 94 b3 01 	call	0x366	; 0x366 <transmitByte>
 38c:	cf 5f       	subi	r28, 0xFF	; 255
 38e:	f8 01       	movw	r30, r16
 390:	ec 0f       	add	r30, r28
 392:	f1 1d       	adc	r31, r1
 394:	80 81       	ld	r24, Z
 396:	81 11       	cpse	r24, r1
 398:	f7 cf       	rjmp	.-18     	; 0x388 <printString+0x12>
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	08 95       	ret

000003a2 <printByte>:

void printByte(uint8_t byte) {
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	d8 2f       	mov	r29, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 3a8:	89 e2       	ldi	r24, 0x29	; 41
 3aa:	d8 9f       	mul	r29, r24
 3ac:	81 2d       	mov	r24, r1
 3ae:	11 24       	eor	r1, r1
 3b0:	82 95       	swap	r24
 3b2:	8f 70       	andi	r24, 0x0F	; 15
 3b4:	80 5d       	subi	r24, 0xD0	; 208
 3b6:	0e 94 b3 01 	call	0x366	; 0x366 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 3ba:	9d ec       	ldi	r25, 0xCD	; 205
 3bc:	d9 9f       	mul	r29, r25
 3be:	c1 2d       	mov	r28, r1
 3c0:	11 24       	eor	r1, r1
 3c2:	c6 95       	lsr	r28
 3c4:	c6 95       	lsr	r28
 3c6:	c6 95       	lsr	r28
 3c8:	c9 9f       	mul	r28, r25
 3ca:	91 2d       	mov	r25, r1
 3cc:	11 24       	eor	r1, r1
 3ce:	96 95       	lsr	r25
 3d0:	96 95       	lsr	r25
 3d2:	96 95       	lsr	r25
 3d4:	99 0f       	add	r25, r25
 3d6:	89 2f       	mov	r24, r25
 3d8:	88 0f       	add	r24, r24
 3da:	88 0f       	add	r24, r24
 3dc:	98 0f       	add	r25, r24
 3de:	8c 2f       	mov	r24, r28
 3e0:	89 1b       	sub	r24, r25
 3e2:	80 5d       	subi	r24, 0xD0	; 208
 3e4:	0e 94 b3 01 	call	0x366	; 0x366 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 3e8:	cc 0f       	add	r28, r28
 3ea:	8c 2f       	mov	r24, r28
 3ec:	88 0f       	add	r24, r24
 3ee:	88 0f       	add	r24, r24
 3f0:	c8 0f       	add	r28, r24
 3f2:	8d 2f       	mov	r24, r29
 3f4:	8c 1b       	sub	r24, r28
 3f6:	80 5d       	subi	r24, 0xD0	; 208
 3f8:	0e 94 b3 01 	call	0x366	; 0x366 <transmitByte>
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <printWord>:

void printWord(uint16_t word) {
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	8c 01       	movw	r16, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 40c:	9c 01       	movw	r18, r24
 40e:	32 95       	swap	r19
 410:	22 95       	swap	r18
 412:	2f 70       	andi	r18, 0x0F	; 15
 414:	23 27       	eor	r18, r19
 416:	3f 70       	andi	r19, 0x0F	; 15
 418:	23 27       	eor	r18, r19
 41a:	a7 e4       	ldi	r26, 0x47	; 71
 41c:	b3 e0       	ldi	r27, 0x03	; 3
 41e:	0e 94 aa 03 	call	0x754	; 0x754 <__umulhisi3>
 422:	96 95       	lsr	r25
 424:	87 95       	ror	r24
 426:	96 95       	lsr	r25
 428:	87 95       	ror	r24
 42a:	96 95       	lsr	r25
 42c:	87 95       	ror	r24
 42e:	80 5d       	subi	r24, 0xD0	; 208
 430:	0e 94 b3 01 	call	0x366	; 0x366 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 434:	98 01       	movw	r18, r16
 436:	36 95       	lsr	r19
 438:	27 95       	ror	r18
 43a:	36 95       	lsr	r19
 43c:	27 95       	ror	r18
 43e:	36 95       	lsr	r19
 440:	27 95       	ror	r18
 442:	a5 ec       	ldi	r26, 0xC5	; 197
 444:	b0 e2       	ldi	r27, 0x20	; 32
 446:	0e 94 aa 03 	call	0x754	; 0x754 <__umulhisi3>
 44a:	ac 01       	movw	r20, r24
 44c:	52 95       	swap	r21
 44e:	42 95       	swap	r20
 450:	4f 70       	andi	r20, 0x0F	; 15
 452:	45 27       	eor	r20, r21
 454:	5f 70       	andi	r21, 0x0F	; 15
 456:	45 27       	eor	r20, r21
 458:	9a 01       	movw	r18, r20
 45a:	ad ec       	ldi	r26, 0xCD	; 205
 45c:	bc ec       	ldi	r27, 0xCC	; 204
 45e:	0e 94 aa 03 	call	0x754	; 0x754 <__umulhisi3>
 462:	96 95       	lsr	r25
 464:	87 95       	ror	r24
 466:	96 95       	lsr	r25
 468:	87 95       	ror	r24
 46a:	96 95       	lsr	r25
 46c:	87 95       	ror	r24
 46e:	9c 01       	movw	r18, r24
 470:	22 0f       	add	r18, r18
 472:	33 1f       	adc	r19, r19
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	82 0f       	add	r24, r18
 482:	93 1f       	adc	r25, r19
 484:	9a 01       	movw	r18, r20
 486:	28 1b       	sub	r18, r24
 488:	39 0b       	sbc	r19, r25
 48a:	c9 01       	movw	r24, r18
 48c:	80 5d       	subi	r24, 0xD0	; 208
 48e:	0e 94 b3 01 	call	0x366	; 0x366 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 492:	98 01       	movw	r18, r16
 494:	36 95       	lsr	r19
 496:	27 95       	ror	r18
 498:	36 95       	lsr	r19
 49a:	27 95       	ror	r18
 49c:	ab e7       	ldi	r26, 0x7B	; 123
 49e:	b4 e1       	ldi	r27, 0x14	; 20
 4a0:	0e 94 aa 03 	call	0x754	; 0x754 <__umulhisi3>
 4a4:	ac 01       	movw	r20, r24
 4a6:	56 95       	lsr	r21
 4a8:	47 95       	ror	r20
 4aa:	9a 01       	movw	r18, r20
 4ac:	ad ec       	ldi	r26, 0xCD	; 205
 4ae:	bc ec       	ldi	r27, 0xCC	; 204
 4b0:	0e 94 aa 03 	call	0x754	; 0x754 <__umulhisi3>
 4b4:	96 95       	lsr	r25
 4b6:	87 95       	ror	r24
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	96 95       	lsr	r25
 4be:	87 95       	ror	r24
 4c0:	9c 01       	movw	r18, r24
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	82 0f       	add	r24, r18
 4d4:	93 1f       	adc	r25, r19
 4d6:	9a 01       	movw	r18, r20
 4d8:	28 1b       	sub	r18, r24
 4da:	39 0b       	sbc	r19, r25
 4dc:	c9 01       	movw	r24, r18
 4de:	80 5d       	subi	r24, 0xD0	; 208
 4e0:	0e 94 b3 01 	call	0x366	; 0x366 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 4e4:	98 01       	movw	r18, r16
 4e6:	ad ec       	ldi	r26, 0xCD	; 205
 4e8:	bc ec       	ldi	r27, 0xCC	; 204
 4ea:	0e 94 aa 03 	call	0x754	; 0x754 <__umulhisi3>
 4ee:	ec 01       	movw	r28, r24
 4f0:	d6 95       	lsr	r29
 4f2:	c7 95       	ror	r28
 4f4:	d6 95       	lsr	r29
 4f6:	c7 95       	ror	r28
 4f8:	d6 95       	lsr	r29
 4fa:	c7 95       	ror	r28
 4fc:	9e 01       	movw	r18, r28
 4fe:	0e 94 aa 03 	call	0x754	; 0x754 <__umulhisi3>
 502:	96 95       	lsr	r25
 504:	87 95       	ror	r24
 506:	96 95       	lsr	r25
 508:	87 95       	ror	r24
 50a:	96 95       	lsr	r25
 50c:	87 95       	ror	r24
 50e:	9c 01       	movw	r18, r24
 510:	22 0f       	add	r18, r18
 512:	33 1f       	adc	r19, r19
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	82 0f       	add	r24, r18
 522:	93 1f       	adc	r25, r19
 524:	9e 01       	movw	r18, r28
 526:	28 1b       	sub	r18, r24
 528:	39 0b       	sbc	r19, r25
 52a:	c9 01       	movw	r24, r18
 52c:	80 5d       	subi	r24, 0xD0	; 208
 52e:	0e 94 b3 01 	call	0x366	; 0x366 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 532:	ce 01       	movw	r24, r28
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	cc 0f       	add	r28, r28
 53a:	dd 1f       	adc	r29, r29
 53c:	cc 0f       	add	r28, r28
 53e:	dd 1f       	adc	r29, r29
 540:	cc 0f       	add	r28, r28
 542:	dd 1f       	adc	r29, r29
 544:	c8 0f       	add	r28, r24
 546:	d9 1f       	adc	r29, r25
 548:	c8 01       	movw	r24, r16
 54a:	8c 1b       	sub	r24, r28
 54c:	9d 0b       	sbc	r25, r29
 54e:	80 5d       	subi	r24, 0xD0	; 208
 550:	0e 94 b3 01 	call	0x366	; 0x366 <transmitByte>
}
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	08 95       	ret

0000055e <__floatunsisf>:
 55e:	e8 94       	clt
 560:	09 c0       	rjmp	.+18     	; 0x574 <__floatsisf+0x12>

00000562 <__floatsisf>:
 562:	97 fb       	bst	r25, 7
 564:	3e f4       	brtc	.+14     	; 0x574 <__floatsisf+0x12>
 566:	90 95       	com	r25
 568:	80 95       	com	r24
 56a:	70 95       	com	r23
 56c:	61 95       	neg	r22
 56e:	7f 4f       	sbci	r23, 0xFF	; 255
 570:	8f 4f       	sbci	r24, 0xFF	; 255
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	99 23       	and	r25, r25
 576:	a9 f0       	breq	.+42     	; 0x5a2 <__floatsisf+0x40>
 578:	f9 2f       	mov	r31, r25
 57a:	96 e9       	ldi	r25, 0x96	; 150
 57c:	bb 27       	eor	r27, r27
 57e:	93 95       	inc	r25
 580:	f6 95       	lsr	r31
 582:	87 95       	ror	r24
 584:	77 95       	ror	r23
 586:	67 95       	ror	r22
 588:	b7 95       	ror	r27
 58a:	f1 11       	cpse	r31, r1
 58c:	f8 cf       	rjmp	.-16     	; 0x57e <__floatsisf+0x1c>
 58e:	fa f4       	brpl	.+62     	; 0x5ce <__floatsisf+0x6c>
 590:	bb 0f       	add	r27, r27
 592:	11 f4       	brne	.+4      	; 0x598 <__floatsisf+0x36>
 594:	60 ff       	sbrs	r22, 0
 596:	1b c0       	rjmp	.+54     	; 0x5ce <__floatsisf+0x6c>
 598:	6f 5f       	subi	r22, 0xFF	; 255
 59a:	7f 4f       	sbci	r23, 0xFF	; 255
 59c:	8f 4f       	sbci	r24, 0xFF	; 255
 59e:	9f 4f       	sbci	r25, 0xFF	; 255
 5a0:	16 c0       	rjmp	.+44     	; 0x5ce <__floatsisf+0x6c>
 5a2:	88 23       	and	r24, r24
 5a4:	11 f0       	breq	.+4      	; 0x5aa <__floatsisf+0x48>
 5a6:	96 e9       	ldi	r25, 0x96	; 150
 5a8:	11 c0       	rjmp	.+34     	; 0x5cc <__floatsisf+0x6a>
 5aa:	77 23       	and	r23, r23
 5ac:	21 f0       	breq	.+8      	; 0x5b6 <__floatsisf+0x54>
 5ae:	9e e8       	ldi	r25, 0x8E	; 142
 5b0:	87 2f       	mov	r24, r23
 5b2:	76 2f       	mov	r23, r22
 5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <__floatsisf+0x5e>
 5b6:	66 23       	and	r22, r22
 5b8:	71 f0       	breq	.+28     	; 0x5d6 <__floatsisf+0x74>
 5ba:	96 e8       	ldi	r25, 0x86	; 134
 5bc:	86 2f       	mov	r24, r22
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	2a f0       	brmi	.+10     	; 0x5ce <__floatsisf+0x6c>
 5c4:	9a 95       	dec	r25
 5c6:	66 0f       	add	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	88 1f       	adc	r24, r24
 5cc:	da f7       	brpl	.-10     	; 0x5c4 <__floatsisf+0x62>
 5ce:	88 0f       	add	r24, r24
 5d0:	96 95       	lsr	r25
 5d2:	87 95       	ror	r24
 5d4:	97 f9       	bld	r25, 7
 5d6:	08 95       	ret

000005d8 <__mulsf3>:
 5d8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__mulsf3x>
 5dc:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_round>
 5e0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_pscA>
 5e4:	38 f0       	brcs	.+14     	; 0x5f4 <__mulsf3+0x1c>
 5e6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_pscB>
 5ea:	20 f0       	brcs	.+8      	; 0x5f4 <__mulsf3+0x1c>
 5ec:	95 23       	and	r25, r21
 5ee:	11 f0       	breq	.+4      	; 0x5f4 <__mulsf3+0x1c>
 5f0:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_inf>
 5f4:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_nan>
 5f8:	11 24       	eor	r1, r1
 5fa:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_szero>

000005fe <__mulsf3x>:
 5fe:	0e 94 81 03 	call	0x702	; 0x702 <__fp_split3>
 602:	70 f3       	brcs	.-36     	; 0x5e0 <__mulsf3+0x8>

00000604 <__mulsf3_pse>:
 604:	95 9f       	mul	r25, r21
 606:	c1 f3       	breq	.-16     	; 0x5f8 <__mulsf3+0x20>
 608:	95 0f       	add	r25, r21
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	55 1f       	adc	r21, r21
 60e:	62 9f       	mul	r22, r18
 610:	f0 01       	movw	r30, r0
 612:	72 9f       	mul	r23, r18
 614:	bb 27       	eor	r27, r27
 616:	f0 0d       	add	r31, r0
 618:	b1 1d       	adc	r27, r1
 61a:	63 9f       	mul	r22, r19
 61c:	aa 27       	eor	r26, r26
 61e:	f0 0d       	add	r31, r0
 620:	b1 1d       	adc	r27, r1
 622:	aa 1f       	adc	r26, r26
 624:	64 9f       	mul	r22, r20
 626:	66 27       	eor	r22, r22
 628:	b0 0d       	add	r27, r0
 62a:	a1 1d       	adc	r26, r1
 62c:	66 1f       	adc	r22, r22
 62e:	82 9f       	mul	r24, r18
 630:	22 27       	eor	r18, r18
 632:	b0 0d       	add	r27, r0
 634:	a1 1d       	adc	r26, r1
 636:	62 1f       	adc	r22, r18
 638:	73 9f       	mul	r23, r19
 63a:	b0 0d       	add	r27, r0
 63c:	a1 1d       	adc	r26, r1
 63e:	62 1f       	adc	r22, r18
 640:	83 9f       	mul	r24, r19
 642:	a0 0d       	add	r26, r0
 644:	61 1d       	adc	r22, r1
 646:	22 1f       	adc	r18, r18
 648:	74 9f       	mul	r23, r20
 64a:	33 27       	eor	r19, r19
 64c:	a0 0d       	add	r26, r0
 64e:	61 1d       	adc	r22, r1
 650:	23 1f       	adc	r18, r19
 652:	84 9f       	mul	r24, r20
 654:	60 0d       	add	r22, r0
 656:	21 1d       	adc	r18, r1
 658:	82 2f       	mov	r24, r18
 65a:	76 2f       	mov	r23, r22
 65c:	6a 2f       	mov	r22, r26
 65e:	11 24       	eor	r1, r1
 660:	9f 57       	subi	r25, 0x7F	; 127
 662:	50 40       	sbci	r21, 0x00	; 0
 664:	9a f0       	brmi	.+38     	; 0x68c <__mulsf3_pse+0x88>
 666:	f1 f0       	breq	.+60     	; 0x6a4 <__mulsf3_pse+0xa0>
 668:	88 23       	and	r24, r24
 66a:	4a f0       	brmi	.+18     	; 0x67e <__mulsf3_pse+0x7a>
 66c:	ee 0f       	add	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	bb 1f       	adc	r27, r27
 672:	66 1f       	adc	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	88 1f       	adc	r24, r24
 678:	91 50       	subi	r25, 0x01	; 1
 67a:	50 40       	sbci	r21, 0x00	; 0
 67c:	a9 f7       	brne	.-22     	; 0x668 <__mulsf3_pse+0x64>
 67e:	9e 3f       	cpi	r25, 0xFE	; 254
 680:	51 05       	cpc	r21, r1
 682:	80 f0       	brcs	.+32     	; 0x6a4 <__mulsf3_pse+0xa0>
 684:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_inf>
 688:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_szero>
 68c:	5f 3f       	cpi	r21, 0xFF	; 255
 68e:	e4 f3       	brlt	.-8      	; 0x688 <__mulsf3_pse+0x84>
 690:	98 3e       	cpi	r25, 0xE8	; 232
 692:	d4 f3       	brlt	.-12     	; 0x688 <__mulsf3_pse+0x84>
 694:	86 95       	lsr	r24
 696:	77 95       	ror	r23
 698:	67 95       	ror	r22
 69a:	b7 95       	ror	r27
 69c:	f7 95       	ror	r31
 69e:	e7 95       	ror	r30
 6a0:	9f 5f       	subi	r25, 0xFF	; 255
 6a2:	c1 f7       	brne	.-16     	; 0x694 <__mulsf3_pse+0x90>
 6a4:	fe 2b       	or	r31, r30
 6a6:	88 0f       	add	r24, r24
 6a8:	91 1d       	adc	r25, r1
 6aa:	96 95       	lsr	r25
 6ac:	87 95       	ror	r24
 6ae:	97 f9       	bld	r25, 7
 6b0:	08 95       	ret

000006b2 <__fp_inf>:
 6b2:	97 f9       	bld	r25, 7
 6b4:	9f 67       	ori	r25, 0x7F	; 127
 6b6:	80 e8       	ldi	r24, 0x80	; 128
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	08 95       	ret

000006be <__fp_nan>:
 6be:	9f ef       	ldi	r25, 0xFF	; 255
 6c0:	80 ec       	ldi	r24, 0xC0	; 192
 6c2:	08 95       	ret

000006c4 <__fp_pscA>:
 6c4:	00 24       	eor	r0, r0
 6c6:	0a 94       	dec	r0
 6c8:	16 16       	cp	r1, r22
 6ca:	17 06       	cpc	r1, r23
 6cc:	18 06       	cpc	r1, r24
 6ce:	09 06       	cpc	r0, r25
 6d0:	08 95       	ret

000006d2 <__fp_pscB>:
 6d2:	00 24       	eor	r0, r0
 6d4:	0a 94       	dec	r0
 6d6:	12 16       	cp	r1, r18
 6d8:	13 06       	cpc	r1, r19
 6da:	14 06       	cpc	r1, r20
 6dc:	05 06       	cpc	r0, r21
 6de:	08 95       	ret

000006e0 <__fp_round>:
 6e0:	09 2e       	mov	r0, r25
 6e2:	03 94       	inc	r0
 6e4:	00 0c       	add	r0, r0
 6e6:	11 f4       	brne	.+4      	; 0x6ec <__fp_round+0xc>
 6e8:	88 23       	and	r24, r24
 6ea:	52 f0       	brmi	.+20     	; 0x700 <__fp_round+0x20>
 6ec:	bb 0f       	add	r27, r27
 6ee:	40 f4       	brcc	.+16     	; 0x700 <__fp_round+0x20>
 6f0:	bf 2b       	or	r27, r31
 6f2:	11 f4       	brne	.+4      	; 0x6f8 <__fp_round+0x18>
 6f4:	60 ff       	sbrs	r22, 0
 6f6:	04 c0       	rjmp	.+8      	; 0x700 <__fp_round+0x20>
 6f8:	6f 5f       	subi	r22, 0xFF	; 255
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	8f 4f       	sbci	r24, 0xFF	; 255
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	08 95       	ret

00000702 <__fp_split3>:
 702:	57 fd       	sbrc	r21, 7
 704:	90 58       	subi	r25, 0x80	; 128
 706:	44 0f       	add	r20, r20
 708:	55 1f       	adc	r21, r21
 70a:	59 f0       	breq	.+22     	; 0x722 <__fp_splitA+0x10>
 70c:	5f 3f       	cpi	r21, 0xFF	; 255
 70e:	71 f0       	breq	.+28     	; 0x72c <__fp_splitA+0x1a>
 710:	47 95       	ror	r20

00000712 <__fp_splitA>:
 712:	88 0f       	add	r24, r24
 714:	97 fb       	bst	r25, 7
 716:	99 1f       	adc	r25, r25
 718:	61 f0       	breq	.+24     	; 0x732 <__fp_splitA+0x20>
 71a:	9f 3f       	cpi	r25, 0xFF	; 255
 71c:	79 f0       	breq	.+30     	; 0x73c <__fp_splitA+0x2a>
 71e:	87 95       	ror	r24
 720:	08 95       	ret
 722:	12 16       	cp	r1, r18
 724:	13 06       	cpc	r1, r19
 726:	14 06       	cpc	r1, r20
 728:	55 1f       	adc	r21, r21
 72a:	f2 cf       	rjmp	.-28     	; 0x710 <__fp_split3+0xe>
 72c:	46 95       	lsr	r20
 72e:	f1 df       	rcall	.-30     	; 0x712 <__fp_splitA>
 730:	08 c0       	rjmp	.+16     	; 0x742 <__fp_splitA+0x30>
 732:	16 16       	cp	r1, r22
 734:	17 06       	cpc	r1, r23
 736:	18 06       	cpc	r1, r24
 738:	99 1f       	adc	r25, r25
 73a:	f1 cf       	rjmp	.-30     	; 0x71e <__fp_splitA+0xc>
 73c:	86 95       	lsr	r24
 73e:	71 05       	cpc	r23, r1
 740:	61 05       	cpc	r22, r1
 742:	08 94       	sec
 744:	08 95       	ret

00000746 <__fp_zero>:
 746:	e8 94       	clt

00000748 <__fp_szero>:
 748:	bb 27       	eor	r27, r27
 74a:	66 27       	eor	r22, r22
 74c:	77 27       	eor	r23, r23
 74e:	cb 01       	movw	r24, r22
 750:	97 f9       	bld	r25, 7
 752:	08 95       	ret

00000754 <__umulhisi3>:
 754:	a2 9f       	mul	r26, r18
 756:	b0 01       	movw	r22, r0
 758:	b3 9f       	mul	r27, r19
 75a:	c0 01       	movw	r24, r0
 75c:	a3 9f       	mul	r26, r19
 75e:	70 0d       	add	r23, r0
 760:	81 1d       	adc	r24, r1
 762:	11 24       	eor	r1, r1
 764:	91 1d       	adc	r25, r1
 766:	b2 9f       	mul	r27, r18
 768:	70 0d       	add	r23, r0
 76a:	81 1d       	adc	r24, r1
 76c:	11 24       	eor	r1, r1
 76e:	91 1d       	adc	r25, r1
 770:	08 95       	ret

00000772 <_exit>:
 772:	f8 94       	cli

00000774 <__stop_program>:
 774:	ff cf       	rjmp	.-2      	; 0x774 <__stop_program>
