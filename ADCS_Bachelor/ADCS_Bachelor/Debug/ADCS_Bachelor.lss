
ADCS_Bachelor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  0000044e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd0  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097d  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000770  00000000  00000000  00002029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f2  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d1  00000000  00000000  00002e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000362b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3e       	cpi	r26, 0xE0	; 224
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 25 02 	jmp	0x44a	; 0x44a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define UBRR_VALUE ((F_CPU / (BAUDRATE * 16UL)) - 1 )


int main(void)
{
	initUSART();
  96:	0e 94 09 01 	call	0x212	; 0x212 <initUSART>
	spiInit();
  9a:	0e 94 8d 00 	call	0x11a	; 0x11a <spiInit>
	printString("\r\nStarting connection test, please wait...");
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	0e 94 22 01 	call	0x244	; 0x244 <printString>
	printString("\r\nIf the program holds here, check your connections.");
  a6:	8b e2       	ldi	r24, 0x2B	; 43
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 22 01 	call	0x244	; 0x244 <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	83 ed       	ldi	r24, 0xD3	; 211
  b2:	90 e3       	ldi	r25, 0x30	; 48
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x28>
  be:	00 00       	nop
	_delay_ms(1000);
	WhoAmICheck();
  c0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <WhoAmICheck>
	uint8_t testbyte = 0x00;
	uint8_t testbyte2 = 0x00;
	
	spiWrite(PIN_XG, INT_GEN_CFG_XL, 0xA5);
  c4:	45 ea       	ldi	r20, 0xA5	; 165
  c6:	66 e0       	ldi	r22, 0x06	; 6
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 b6 00 	call	0x16c	; 0x16c <spiWrite>
	spiWrite(PIN_XG, INT_GEN_THS_X_XL, 0xD7);
  ce:	47 ed       	ldi	r20, 0xD7	; 215
  d0:	67 e0       	ldi	r22, 0x07	; 7
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 b6 00 	call	0x16c	; 0x16c <spiWrite>
	
	testbyte = spiRead(PIN_XG, INT_GEN_CFG_XL);
  d8:	66 e0       	ldi	r22, 0x06	; 6
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 96 00 	call	0x12c	; 0x12c <spiRead>
  e0:	c8 2f       	mov	r28, r24
	printString("\r\nReading data from INT_GEN_CFG_XL (Expecting 165): ");
  e2:	80 e6       	ldi	r24, 0x60	; 96
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 22 01 	call	0x244	; 0x244 <printString>
	printByte(testbyte);
  ea:	8c 2f       	mov	r24, r28
  ec:	0e 94 38 01 	call	0x270	; 0x270 <printByte>
	printString("");
  f0:	8b ec       	ldi	r24, 0xCB	; 203
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	0e 94 22 01 	call	0x244	; 0x244 <printString>
	
	testbyte2 = spiRead(PIN_XG, INT_GEN_THS_X_XL);
  f8:	67 e0       	ldi	r22, 0x07	; 7
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 96 00 	call	0x12c	; 0x12c <spiRead>
 100:	c8 2f       	mov	r28, r24
	printString("\r\nReading data from INT_GEN_THS_X_XL (Expecting 215): ");
 102:	85 e9       	ldi	r24, 0x95	; 149
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 22 01 	call	0x244	; 0x244 <printString>
	printByte(testbyte2);
 10a:	8c 2f       	mov	r24, r28
 10c:	0e 94 38 01 	call	0x270	; 0x270 <printByte>
	printString("");
 110:	8b ec       	ldi	r24, 0xCB	; 203
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 22 01 	call	0x244	; 0x244 <printString>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x82>

0000011a <spiInit>:
#include <stdio.h>
#include "header.h"
#include "registers.h"

void spiInit(void){
	DDRB = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1);		// MOSI, SCK, CS_M and CS_AG output
 11a:	8e e2       	ldi	r24, 0x2E	; 46
 11c:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<PORTB4)|(1<<PORTB2)|(1<<PORTB1);		// pullup on MISO. CS_M and CS_AG -> Active/LOW
 11e:	86 e1       	ldi	r24, 0x16	; 22
 120:	85 b9       	out	0x05, r24	; 5
	PINB = (1<<PINB2)|(1<<PINB1);						// CS_M and CS_AG start high
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	83 b9       	out	0x03, r24	; 3
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)|(1<<SPR1)|(1<<SPR0);		// SPI enable, Master mode, MSB first, Clockdiv 128'
 126:	8f e5       	ldi	r24, 0x5F	; 95
 128:	8c bd       	out	0x2c, r24	; 44
 12a:	08 95       	ret

0000012c <spiRead>:
																			// Clock idle HIGH, Data Captured on Rising edge. SPI mode 3.
}

uint8_t spiRead(uint8_t csPin, uint8_t subAddress){
//	uint8_t temp = 0;
	PINB &= ~(1<<csPin);				// start SPI conversation
 12c:	43 b1       	in	r20, 0x03	; 3
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <spiRead+0xe>
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	8a 95       	dec	r24
 13c:	e2 f7       	brpl	.-8      	; 0x136 <spiRead+0xa>
 13e:	cf 01       	movw	r24, r30
 140:	2e 2f       	mov	r18, r30
 142:	20 95       	com	r18
 144:	42 23       	and	r20, r18
 146:	43 b9       	out	0x03, r20	; 3
 148:	ef e9       	ldi	r30, 0x9F	; 159
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <spiRead+0x20>
 150:	00 c0       	rjmp	.+0      	; 0x152 <spiRead+0x26>
 152:	00 00       	nop
	_delay_ms(1);
	SPDR = 0x80 | (subAddress & 0x3f);	// Set address.
 154:	6f 73       	andi	r22, 0x3F	; 63
 156:	60 68       	ori	r22, 0x80	; 128
 158:	6e bd       	out	0x2e, r22	; 46
	asm volatile("nop");				// See NOTES at the top of the page.
 15a:	00 00       	nop
	while (!(SPSR & _BV(SPIF)));		// wait for transfer to complete
 15c:	0d b4       	in	r0, 0x2d	; 45
 15e:	07 fe       	sbrs	r0, 7
 160:	fd cf       	rjmp	.-6      	; 0x15c <spiRead+0x30>
//	temp = SPDR;
//	return temp;
	PINB |= (1<<csPin);					// end transmission
 162:	93 b1       	in	r25, 0x03	; 3
 164:	89 2b       	or	r24, r25
 166:	83 b9       	out	0x03, r24	; 3
	return SPDR;
 168:	8e b5       	in	r24, 0x2e	; 46
}
 16a:	08 95       	ret

0000016c <spiWrite>:

void spiWrite(uint8_t csPin, uint8_t subAddress, uint8_t data){
	PINB &= ~(1<<csPin);				// start SPI transmission
 16c:	53 b1       	in	r21, 0x03	; 3
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	f9 01       	movw	r30, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <spiWrite+0xe>
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	8a 95       	dec	r24
 17c:	e2 f7       	brpl	.-8      	; 0x176 <spiWrite+0xa>
 17e:	cf 01       	movw	r24, r30
 180:	2e 2f       	mov	r18, r30
 182:	20 95       	com	r18
 184:	52 23       	and	r21, r18
 186:	53 b9       	out	0x03, r21	; 3
	SPDR = (subAddress & 0x3F);			// Transfer address.
 188:	6f 73       	andi	r22, 0x3F	; 63
 18a:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));			// wait for transfer to complete
 18c:	0d b4       	in	r0, 0x2d	; 45
 18e:	07 fe       	sbrs	r0, 7
 190:	fd cf       	rjmp	.-6      	; 0x18c <spiWrite+0x20>
	SPDR = data;						// transmit data
 192:	4e bd       	out	0x2e, r20	; 46
	while(!(SPSR & (1<<SPIF)));			// wait for transfer to complete
 194:	0d b4       	in	r0, 0x2d	; 45
 196:	07 fe       	sbrs	r0, 7
 198:	fd cf       	rjmp	.-6      	; 0x194 <spiWrite+0x28>
	PINB |= (1<<csPin);					// end transmission
 19a:	93 b1       	in	r25, 0x03	; 3
 19c:	89 2b       	or	r24, r25
 19e:	83 b9       	out	0x03, r24	; 3
 1a0:	08 95       	ret

000001a2 <WhoAmICheck>:
}

void WhoAmICheck(void){
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
	uint8_t testM = 0x00;
	uint8_t testXG = 0x00;
	uint16_t whoAmICombined = 0x0000;
	testXG = spiRead(PIN_XG, WHO_AM_I_XG);
 1a6:	6f e0       	ldi	r22, 0x0F	; 15
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 96 00 	call	0x12c	; 0x12c <spiRead>
 1ae:	c8 2f       	mov	r28, r24
	testM = spiRead(PIN_M, WHO_AM_I_M);
 1b0:	6f e0       	ldi	r22, 0x0F	; 15
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 96 00 	call	0x12c	; 0x12c <spiRead>
	whoAmICombined = (testXG << 8) | testM;
	while(whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP)){
 1b8:	2c 2f       	mov	r18, r28
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	32 2f       	mov	r19, r18
 1be:	22 27       	eor	r18, r18
 1c0:	28 2b       	or	r18, r24
 1c2:	2d 33       	cpi	r18, 0x3D	; 61
 1c4:	38 46       	sbci	r19, 0x68	; 104
 1c6:	11 f1       	breq	.+68     	; 0x20c <WhoAmICheck+0x6a>
		testM = spiRead(PIN_M, WHO_AM_I_M);
 1c8:	6f e0       	ldi	r22, 0x0F	; 15
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 96 00 	call	0x12c	; 0x12c <spiRead>
 1d0:	c8 2f       	mov	r28, r24
		testXG = spiRead(PIN_XG, WHO_AM_I_XG);
 1d2:	6f e0       	ldi	r22, 0x0F	; 15
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 96 00 	call	0x12c	; 0x12c <spiRead>
		whoAmICombined = (testXG << 8) | (testM);
 1da:	d0 e0       	ldi	r29, 0x00	; 0
 1dc:	d8 2b       	or	r29, r24
		printString("\r\n WHO_AM_I_CHECK: ");
 1de:	8c ec       	ldi	r24, 0xCC	; 204
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 22 01 	call	0x244	; 0x244 <printString>
		printWord(whoAmICombined);
 1e6:	ce 01       	movw	r24, r28
 1e8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <printWord>
		printString("");
 1ec:	8b ec       	ldi	r24, 0xCB	; 203
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 22 01 	call	0x244	; 0x244 <printString>
 1f4:	9f ef       	ldi	r25, 0xFF	; 255
 1f6:	21 ee       	ldi	r18, 0xE1	; 225
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	91 50       	subi	r25, 0x01	; 1
 1fc:	20 40       	sbci	r18, 0x00	; 0
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <WhoAmICheck+0x58>
 202:	00 c0       	rjmp	.+0      	; 0x204 <WhoAmICheck+0x62>
 204:	00 00       	nop
	uint8_t testXG = 0x00;
	uint16_t whoAmICombined = 0x0000;
	testXG = spiRead(PIN_XG, WHO_AM_I_XG);
	testM = spiRead(PIN_M, WHO_AM_I_M);
	whoAmICombined = (testXG << 8) | testM;
	while(whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP)){
 206:	cd 33       	cpi	r28, 0x3D	; 61
 208:	d8 46       	sbci	r29, 0x68	; 104
 20a:	f1 f6       	brne	.-68     	; 0x1c8 <WhoAmICheck+0x26>
		printString("\r\n WHO_AM_I_CHECK: ");
		printWord(whoAmICombined);
		printString("");
		_delay_ms(100);
	}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <initUSART>:
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
}
 212:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 216:	87 e6       	ldi	r24, 0x67	; 103
 218:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 21c:	e0 ec       	ldi	r30, 0xC0	; 192
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	8d 7f       	andi	r24, 0xFD	; 253
 224:	80 83       	st	Z, r24
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 232:	08 95       	ret

00000234 <transmitByte>:
 234:	e0 ec       	ldi	r30, 0xC0	; 192
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	90 81       	ld	r25, Z
 23a:	95 ff       	sbrs	r25, 5
 23c:	fd cf       	rjmp	.-6      	; 0x238 <transmitByte+0x4>
 23e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 242:	08 95       	ret

00000244 <printString>:
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	fc 01       	movw	r30, r24
 24c:	80 81       	ld	r24, Z
 24e:	88 23       	and	r24, r24
 250:	59 f0       	breq	.+22     	; 0x268 <printString+0x24>
 252:	8f 01       	movw	r16, r30
 254:	c0 e0       	ldi	r28, 0x00	; 0
 256:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
 25a:	cf 5f       	subi	r28, 0xFF	; 255
 25c:	f8 01       	movw	r30, r16
 25e:	ec 0f       	add	r30, r28
 260:	f1 1d       	adc	r31, r1
 262:	80 81       	ld	r24, Z
 264:	81 11       	cpse	r24, r1
 266:	f7 cf       	rjmp	.-18     	; 0x256 <printString+0x12>
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <printByte>:

void printByte(uint8_t byte) {
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	d8 2f       	mov	r29, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 276:	89 e2       	ldi	r24, 0x29	; 41
 278:	d8 9f       	mul	r29, r24
 27a:	81 2d       	mov	r24, r1
 27c:	11 24       	eor	r1, r1
 27e:	82 95       	swap	r24
 280:	8f 70       	andi	r24, 0x0F	; 15
 282:	80 5d       	subi	r24, 0xD0	; 208
 284:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 288:	9d ec       	ldi	r25, 0xCD	; 205
 28a:	d9 9f       	mul	r29, r25
 28c:	c1 2d       	mov	r28, r1
 28e:	11 24       	eor	r1, r1
 290:	c6 95       	lsr	r28
 292:	c6 95       	lsr	r28
 294:	c6 95       	lsr	r28
 296:	c9 9f       	mul	r28, r25
 298:	91 2d       	mov	r25, r1
 29a:	11 24       	eor	r1, r1
 29c:	96 95       	lsr	r25
 29e:	96 95       	lsr	r25
 2a0:	96 95       	lsr	r25
 2a2:	99 0f       	add	r25, r25
 2a4:	89 2f       	mov	r24, r25
 2a6:	88 0f       	add	r24, r24
 2a8:	88 0f       	add	r24, r24
 2aa:	98 0f       	add	r25, r24
 2ac:	8c 2f       	mov	r24, r28
 2ae:	89 1b       	sub	r24, r25
 2b0:	80 5d       	subi	r24, 0xD0	; 208
 2b2:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 2b6:	cc 0f       	add	r28, r28
 2b8:	8c 2f       	mov	r24, r28
 2ba:	88 0f       	add	r24, r24
 2bc:	88 0f       	add	r24, r24
 2be:	c8 0f       	add	r28, r24
 2c0:	8d 2f       	mov	r24, r29
 2c2:	8c 1b       	sub	r24, r28
 2c4:	80 5d       	subi	r24, 0xD0	; 208
 2c6:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <printWord>:

void printWord(uint16_t word) {
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	8c 01       	movw	r16, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 2da:	9c 01       	movw	r18, r24
 2dc:	32 95       	swap	r19
 2de:	22 95       	swap	r18
 2e0:	2f 70       	andi	r18, 0x0F	; 15
 2e2:	23 27       	eor	r18, r19
 2e4:	3f 70       	andi	r19, 0x0F	; 15
 2e6:	23 27       	eor	r18, r19
 2e8:	a7 e4       	ldi	r26, 0x47	; 71
 2ea:	b3 e0       	ldi	r27, 0x03	; 3
 2ec:	0e 94 16 02 	call	0x42c	; 0x42c <__umulhisi3>
 2f0:	96 95       	lsr	r25
 2f2:	87 95       	ror	r24
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	96 95       	lsr	r25
 2fa:	87 95       	ror	r24
 2fc:	80 5d       	subi	r24, 0xD0	; 208
 2fe:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 302:	98 01       	movw	r18, r16
 304:	36 95       	lsr	r19
 306:	27 95       	ror	r18
 308:	36 95       	lsr	r19
 30a:	27 95       	ror	r18
 30c:	36 95       	lsr	r19
 30e:	27 95       	ror	r18
 310:	a5 ec       	ldi	r26, 0xC5	; 197
 312:	b0 e2       	ldi	r27, 0x20	; 32
 314:	0e 94 16 02 	call	0x42c	; 0x42c <__umulhisi3>
 318:	ac 01       	movw	r20, r24
 31a:	52 95       	swap	r21
 31c:	42 95       	swap	r20
 31e:	4f 70       	andi	r20, 0x0F	; 15
 320:	45 27       	eor	r20, r21
 322:	5f 70       	andi	r21, 0x0F	; 15
 324:	45 27       	eor	r20, r21
 326:	9a 01       	movw	r18, r20
 328:	ad ec       	ldi	r26, 0xCD	; 205
 32a:	bc ec       	ldi	r27, 0xCC	; 204
 32c:	0e 94 16 02 	call	0x42c	; 0x42c <__umulhisi3>
 330:	96 95       	lsr	r25
 332:	87 95       	ror	r24
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	96 95       	lsr	r25
 33a:	87 95       	ror	r24
 33c:	9c 01       	movw	r18, r24
 33e:	22 0f       	add	r18, r18
 340:	33 1f       	adc	r19, r19
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	82 0f       	add	r24, r18
 350:	93 1f       	adc	r25, r19
 352:	9a 01       	movw	r18, r20
 354:	28 1b       	sub	r18, r24
 356:	39 0b       	sbc	r19, r25
 358:	c9 01       	movw	r24, r18
 35a:	80 5d       	subi	r24, 0xD0	; 208
 35c:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 360:	98 01       	movw	r18, r16
 362:	36 95       	lsr	r19
 364:	27 95       	ror	r18
 366:	36 95       	lsr	r19
 368:	27 95       	ror	r18
 36a:	ab e7       	ldi	r26, 0x7B	; 123
 36c:	b4 e1       	ldi	r27, 0x14	; 20
 36e:	0e 94 16 02 	call	0x42c	; 0x42c <__umulhisi3>
 372:	ac 01       	movw	r20, r24
 374:	56 95       	lsr	r21
 376:	47 95       	ror	r20
 378:	9a 01       	movw	r18, r20
 37a:	ad ec       	ldi	r26, 0xCD	; 205
 37c:	bc ec       	ldi	r27, 0xCC	; 204
 37e:	0e 94 16 02 	call	0x42c	; 0x42c <__umulhisi3>
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	9c 01       	movw	r18, r24
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	82 0f       	add	r24, r18
 3a2:	93 1f       	adc	r25, r19
 3a4:	9a 01       	movw	r18, r20
 3a6:	28 1b       	sub	r18, r24
 3a8:	39 0b       	sbc	r19, r25
 3aa:	c9 01       	movw	r24, r18
 3ac:	80 5d       	subi	r24, 0xD0	; 208
 3ae:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 3b2:	98 01       	movw	r18, r16
 3b4:	ad ec       	ldi	r26, 0xCD	; 205
 3b6:	bc ec       	ldi	r27, 0xCC	; 204
 3b8:	0e 94 16 02 	call	0x42c	; 0x42c <__umulhisi3>
 3bc:	ec 01       	movw	r28, r24
 3be:	d6 95       	lsr	r29
 3c0:	c7 95       	ror	r28
 3c2:	d6 95       	lsr	r29
 3c4:	c7 95       	ror	r28
 3c6:	d6 95       	lsr	r29
 3c8:	c7 95       	ror	r28
 3ca:	9e 01       	movw	r18, r28
 3cc:	0e 94 16 02 	call	0x42c	; 0x42c <__umulhisi3>
 3d0:	96 95       	lsr	r25
 3d2:	87 95       	ror	r24
 3d4:	96 95       	lsr	r25
 3d6:	87 95       	ror	r24
 3d8:	96 95       	lsr	r25
 3da:	87 95       	ror	r24
 3dc:	9c 01       	movw	r18, r24
 3de:	22 0f       	add	r18, r18
 3e0:	33 1f       	adc	r19, r19
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	82 0f       	add	r24, r18
 3f0:	93 1f       	adc	r25, r19
 3f2:	9e 01       	movw	r18, r28
 3f4:	28 1b       	sub	r18, r24
 3f6:	39 0b       	sbc	r19, r25
 3f8:	c9 01       	movw	r24, r18
 3fa:	80 5d       	subi	r24, 0xD0	; 208
 3fc:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 400:	ce 01       	movw	r24, r28
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	cc 0f       	add	r28, r28
 408:	dd 1f       	adc	r29, r29
 40a:	cc 0f       	add	r28, r28
 40c:	dd 1f       	adc	r29, r29
 40e:	cc 0f       	add	r28, r28
 410:	dd 1f       	adc	r29, r29
 412:	c8 0f       	add	r28, r24
 414:	d9 1f       	adc	r29, r25
 416:	c8 01       	movw	r24, r16
 418:	8c 1b       	sub	r24, r28
 41a:	9d 0b       	sbc	r25, r29
 41c:	80 5d       	subi	r24, 0xD0	; 208
 41e:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	08 95       	ret

0000042c <__umulhisi3>:
 42c:	a2 9f       	mul	r26, r18
 42e:	b0 01       	movw	r22, r0
 430:	b3 9f       	mul	r27, r19
 432:	c0 01       	movw	r24, r0
 434:	a3 9f       	mul	r26, r19
 436:	70 0d       	add	r23, r0
 438:	81 1d       	adc	r24, r1
 43a:	11 24       	eor	r1, r1
 43c:	91 1d       	adc	r25, r1
 43e:	b2 9f       	mul	r27, r18
 440:	70 0d       	add	r23, r0
 442:	81 1d       	adc	r24, r1
 444:	11 24       	eor	r1, r1
 446:	91 1d       	adc	r25, r1
 448:	08 95       	ret

0000044a <_exit>:
 44a:	f8 94       	cli

0000044c <__stop_program>:
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__stop_program>
