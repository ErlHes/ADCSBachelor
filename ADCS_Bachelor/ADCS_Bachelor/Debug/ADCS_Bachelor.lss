
ADCS_Bachelor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  0000046c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010b9  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099e  00000000  00000000  000017cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c5  00000000  00000000  0000216b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00002930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052c  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000098b  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003a17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3e       	cpi	r26, 0xEC	; 236
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 34 02 	jmp	0x468	; 0x468 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define UBRR_VALUE ((F_CPU / (BAUDRATE * 16UL)) - 1 )


int main(void)
{
	initUSART();
  96:	0e 94 18 01 	call	0x230	; 0x230 <initUSART>
	spiInit();
  9a:	0e 94 83 00 	call	0x106	; 0x106 <spiInit>
	printString("\r\nStarting connection test, please wait...");
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	0e 94 31 01 	call	0x262	; 0x262 <printString>
	printString("\r\nIf the program holds here, check your connections.");
  a6:	8b e2       	ldi	r24, 0x2B	; 43
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 31 01 	call	0x262	; 0x262 <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	83 ed       	ldi	r24, 0xD3	; 211
  b2:	90 e3       	ldi	r25, 0x30	; 48
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x28>
  be:	00 00       	nop
	_delay_ms(1000);
	WhoAmICheck();
  c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <WhoAmICheck>
	
	uint8_t testbyte = 0x00;
	uint8_t testbyte2 = 0x00;
		
	testbyte = SPIreadByte(PIN_XG, CTRL_REG4);
  c4:	6e e1       	ldi	r22, 0x1E	; 30
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 ca 00 	call	0x194	; 0x194 <SPIreadByte>
  cc:	c8 2f       	mov	r28, r24
	printString("\r\nReading data from CTRL_REG4 (Expecting 56): ");
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 31 01 	call	0x262	; 0x262 <printString>
	printByte(testbyte);
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 47 01 	call	0x28e	; 0x28e <printByte>
	printString("");
  dc:	8e eb       	ldi	r24, 0xBE	; 190
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	0e 94 31 01 	call	0x262	; 0x262 <printString>
		
	testbyte2 = SPIreadByte(PIN_M, CTRL_REG3_M);
  e4:	62 e2       	ldi	r22, 0x22	; 34
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 ca 00 	call	0x194	; 0x194 <SPIreadByte>
  ec:	c8 2f       	mov	r28, r24
	printString("\r\nReading data from CTRL_REG3_M (Expecting 3): ");
  ee:	8f e8       	ldi	r24, 0x8F	; 143
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 31 01 	call	0x262	; 0x262 <printString>
	printByte(testbyte2);
  f6:	8c 2f       	mov	r24, r28
  f8:	0e 94 47 01 	call	0x28e	; 0x28e <printByte>
	printString("");
  fc:	8e eb       	ldi	r24, 0xBE	; 190
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 31 01 	call	0x262	; 0x262 <printString>
 104:	ff cf       	rjmp	.-2      	; 0x104 <main+0x6e>

00000106 <spiInit>:
#include <stdio.h>
#include "header.h"
#include "registers.h"

void spiInit(void){
	DDRB = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);			// MOSI, SCK, CS_M and CS_AG output ||DDB0 is for testing
 106:	8f e2       	ldi	r24, 0x2F	; 47
 108:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<PORTB2)|(1<<PORTB1)|(1<<PORTB0);						// CS_M and CS_AG start HIGH || PORTB0 is for testing
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	85 b9       	out	0x05, r24	; 5
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)|(1<<SPR1)|(1<<SPR0);	// * SPI enable, Master mode, MSB first, Clockdiv 128
 10e:	8f e5       	ldi	r24, 0x5F	; 95
 110:	8c bd       	out	0x2c, r24	; 44
 112:	08 95       	ret

00000114 <spiTransfer>:
	
	return count;
}

uint8_t spiTransfer(uint8_t data) {
    SPDR = data;
 114:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
 116:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
 118:	0d b4       	in	r0, 0x2d	; 45
 11a:	07 fe       	sbrs	r0, 7
 11c:	fd cf       	rjmp	.-6      	; 0x118 <spiTransfer+0x4>
    return SPDR;
 11e:	8e b5       	in	r24, 0x2e	; 46
  }
 120:	08 95       	ret

00000122 <SPIreadBytes>:
	return temp;
}

uint8_t SPIreadBytes(uint8_t csPin, uint8_t subAddress,
uint8_t * dest, uint8_t count)
{
 122:	df 92       	push	r13
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	8a 01       	movw	r16, r20
 132:	d2 2e       	mov	r13, r18
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 134:	6f 73       	andi	r22, 0x3F	; 63
 136:	60 68       	ori	r22, 0x80	; 128
	// Mag SPI port is different. If we're reading multiple bytes,
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == PIN_M) && count > 1)
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	21 f4       	brne	.+8      	; 0x144 <SPIreadBytes+0x22>
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	92 17       	cp	r25, r18
 140:	08 f4       	brcc	.+2      	; 0x144 <SPIreadBytes+0x22>
	rAddress |= 0x40;
 142:	60 64       	ori	r22, 0x40	; 64
	
	PORTB &= ~(1<<csPin);	// Initiate communication
 144:	95 b1       	in	r25, 0x05	; 5
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	79 01       	movw	r14, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <SPIreadBytes+0x30>
 14e:	ee 0c       	add	r14, r14
 150:	ff 1c       	adc	r15, r15
 152:	8a 95       	dec	r24
 154:	e2 f7       	brpl	.-8      	; 0x14e <SPIreadBytes+0x2c>
 156:	8e 2d       	mov	r24, r14
 158:	80 95       	com	r24
 15a:	89 23       	and	r24, r25
 15c:	85 b9       	out	0x05, r24	; 5
	spiTransfer(rAddress);
 15e:	86 2f       	mov	r24, r22
 160:	0e 94 8a 00 	call	0x114	; 0x114 <spiTransfer>
	for (int i=0; i<count; i++)
 164:	dd 20       	and	r13, r13
 166:	51 f0       	breq	.+20     	; 0x17c <SPIreadBytes+0x5a>
 168:	e8 01       	movw	r28, r16
 16a:	0d 0d       	add	r16, r13
 16c:	11 1d       	adc	r17, r1
	{
		dest[i] = spiTransfer(0x00); // Read into destination array
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 8a 00 	call	0x114	; 0x114 <spiTransfer>
 174:	89 93       	st	Y+, r24
	if ((csPin == PIN_M) && count > 1)
	rAddress |= 0x40;
	
	PORTB &= ~(1<<csPin);	// Initiate communication
	spiTransfer(rAddress);
	for (int i=0; i<count; i++)
 176:	c0 17       	cp	r28, r16
 178:	d1 07       	cpc	r29, r17
 17a:	c9 f7       	brne	.-14     	; 0x16e <SPIreadBytes+0x4c>
	{
		dest[i] = spiTransfer(0x00); // Read into destination array
	}
	PORTB |= (1<<csPin); // Close communication
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	e8 2a       	or	r14, r24
 180:	e5 b8       	out	0x05, r14	; 5
	
	return count;
}
 182:	8d 2d       	mov	r24, r13
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	ff 90       	pop	r15
 18e:	ef 90       	pop	r14
 190:	df 90       	pop	r13
 192:	08 95       	ret

00000194 <SPIreadByte>:
																		// * Clock idle HIGH, Data Captured on Rising edge. SPI mode 3.
}


uint8_t SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	1f 92       	push	r1
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	// Use the multiple read function to read 1 byte.
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	ae 01       	movw	r20, r28
 1a2:	4f 5f       	subi	r20, 0xFF	; 255
 1a4:	5f 4f       	sbci	r21, 0xFF	; 255
 1a6:	0e 94 91 00 	call	0x122	; 0x122 <SPIreadBytes>
	return temp;
}
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <WhoAmICheck>:
    asm volatile("nop");
    while (!(SPSR & _BV(SPIF))) ; // wait
    return SPDR;
  }
  
  void WhoAmICheck(void){
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	  uint8_t testM = 0x00;
	  uint8_t testXG = 0x00;
	  uint16_t whoAmICombined = 0x0000;
	  //spiWrite(PIN_M, CTRL_REG3_M, 0b00000111);		//Needed to read from the Magnetometer registers.
	  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
 1b8:	6f e0       	ldi	r22, 0x0F	; 15
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 ca 00 	call	0x194	; 0x194 <SPIreadByte>
 1c0:	c8 2f       	mov	r28, r24
	  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
 1c2:	6f e0       	ldi	r22, 0x0F	; 15
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 ca 00 	call	0x194	; 0x194 <SPIreadByte>
	  whoAmICombined = (testXG << 8) | testM;
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	dc 2f       	mov	r29, r28
 1ce:	cc 27       	eor	r28, r28
 1d0:	c8 2b       	or	r28, r24
	  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
 1d2:	8f eb       	ldi	r24, 0xBF	; 191
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 31 01 	call	0x262	; 0x262 <printString>
	  printWord(whoAmICombined);
 1da:	ce 01       	movw	r24, r28
 1dc:	0e 94 77 01 	call	0x2ee	; 0x2ee <printWord>
	  while(whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP)){
 1e0:	cd 33       	cpi	r28, 0x3D	; 61
 1e2:	d8 46       	sbci	r29, 0x68	; 104
 1e4:	11 f1       	breq	.+68     	; 0x22a <WhoAmICheck+0x76>
		  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
 1e6:	6f e0       	ldi	r22, 0x0F	; 15
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 ca 00 	call	0x194	; 0x194 <SPIreadByte>
 1ee:	c8 2f       	mov	r28, r24
		  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
 1f0:	6f e0       	ldi	r22, 0x0F	; 15
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 ca 00 	call	0x194	; 0x194 <SPIreadByte>
		  whoAmICombined = (testXG << 8) | (testM);
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	d8 2b       	or	r29, r24
		  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
 1fc:	8f eb       	ldi	r24, 0xBF	; 191
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 31 01 	call	0x262	; 0x262 <printString>
		  printWord(whoAmICombined);
 204:	ce 01       	movw	r24, r28
 206:	0e 94 77 01 	call	0x2ee	; 0x2ee <printWord>
		  printString("");
 20a:	8e eb       	ldi	r24, 0xBE	; 190
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 31 01 	call	0x262	; 0x262 <printString>
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	91 ee       	ldi	r25, 0xE1	; 225
 216:	24 e0       	ldi	r18, 0x04	; 4
 218:	81 50       	subi	r24, 0x01	; 1
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	20 40       	sbci	r18, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <WhoAmICheck+0x64>
 220:	00 c0       	rjmp	.+0      	; 0x222 <WhoAmICheck+0x6e>
 222:	00 00       	nop
	  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
	  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
	  whoAmICombined = (testXG << 8) | testM;
	  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
	  printWord(whoAmICombined);
	  while(whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP)){
 224:	cd 33       	cpi	r28, 0x3D	; 61
 226:	d8 46       	sbci	r29, 0x68	; 104
 228:	f1 f6       	brne	.-68     	; 0x1e6 <WhoAmICheck+0x32>
		  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
		  printWord(whoAmICombined);
		  printString("");
		  _delay_ms(100);
	  }
  }
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <initUSART>:
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
}
 230:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 234:	87 e6       	ldi	r24, 0x67	; 103
 236:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 23a:	e0 ec       	ldi	r30, 0xC0	; 192
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	8d 7f       	andi	r24, 0xFD	; 253
 242:	80 83       	st	Z, r24
 244:	88 e1       	ldi	r24, 0x18	; 24
 246:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 250:	08 95       	ret

00000252 <transmitByte>:
 252:	e0 ec       	ldi	r30, 0xC0	; 192
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	90 81       	ld	r25, Z
 258:	95 ff       	sbrs	r25, 5
 25a:	fd cf       	rjmp	.-6      	; 0x256 <transmitByte+0x4>
 25c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 260:	08 95       	ret

00000262 <printString>:
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	fc 01       	movw	r30, r24
 26a:	80 81       	ld	r24, Z
 26c:	88 23       	and	r24, r24
 26e:	59 f0       	breq	.+22     	; 0x286 <printString+0x24>
 270:	8f 01       	movw	r16, r30
 272:	c0 e0       	ldi	r28, 0x00	; 0
 274:	0e 94 29 01 	call	0x252	; 0x252 <transmitByte>
 278:	cf 5f       	subi	r28, 0xFF	; 255
 27a:	f8 01       	movw	r30, r16
 27c:	ec 0f       	add	r30, r28
 27e:	f1 1d       	adc	r31, r1
 280:	80 81       	ld	r24, Z
 282:	81 11       	cpse	r24, r1
 284:	f7 cf       	rjmp	.-18     	; 0x274 <printString+0x12>
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	08 95       	ret

0000028e <printByte>:

void printByte(uint8_t byte) {
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	d8 2f       	mov	r29, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 294:	89 e2       	ldi	r24, 0x29	; 41
 296:	d8 9f       	mul	r29, r24
 298:	81 2d       	mov	r24, r1
 29a:	11 24       	eor	r1, r1
 29c:	82 95       	swap	r24
 29e:	8f 70       	andi	r24, 0x0F	; 15
 2a0:	80 5d       	subi	r24, 0xD0	; 208
 2a2:	0e 94 29 01 	call	0x252	; 0x252 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 2a6:	9d ec       	ldi	r25, 0xCD	; 205
 2a8:	d9 9f       	mul	r29, r25
 2aa:	c1 2d       	mov	r28, r1
 2ac:	11 24       	eor	r1, r1
 2ae:	c6 95       	lsr	r28
 2b0:	c6 95       	lsr	r28
 2b2:	c6 95       	lsr	r28
 2b4:	c9 9f       	mul	r28, r25
 2b6:	91 2d       	mov	r25, r1
 2b8:	11 24       	eor	r1, r1
 2ba:	96 95       	lsr	r25
 2bc:	96 95       	lsr	r25
 2be:	96 95       	lsr	r25
 2c0:	99 0f       	add	r25, r25
 2c2:	89 2f       	mov	r24, r25
 2c4:	88 0f       	add	r24, r24
 2c6:	88 0f       	add	r24, r24
 2c8:	98 0f       	add	r25, r24
 2ca:	8c 2f       	mov	r24, r28
 2cc:	89 1b       	sub	r24, r25
 2ce:	80 5d       	subi	r24, 0xD0	; 208
 2d0:	0e 94 29 01 	call	0x252	; 0x252 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 2d4:	cc 0f       	add	r28, r28
 2d6:	8c 2f       	mov	r24, r28
 2d8:	88 0f       	add	r24, r24
 2da:	88 0f       	add	r24, r24
 2dc:	c8 0f       	add	r28, r24
 2de:	8d 2f       	mov	r24, r29
 2e0:	8c 1b       	sub	r24, r28
 2e2:	80 5d       	subi	r24, 0xD0	; 208
 2e4:	0e 94 29 01 	call	0x252	; 0x252 <transmitByte>
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <printWord>:

void printWord(uint16_t word) {
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	8c 01       	movw	r16, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 2f8:	9c 01       	movw	r18, r24
 2fa:	32 95       	swap	r19
 2fc:	22 95       	swap	r18
 2fe:	2f 70       	andi	r18, 0x0F	; 15
 300:	23 27       	eor	r18, r19
 302:	3f 70       	andi	r19, 0x0F	; 15
 304:	23 27       	eor	r18, r19
 306:	a7 e4       	ldi	r26, 0x47	; 71
 308:	b3 e0       	ldi	r27, 0x03	; 3
 30a:	0e 94 25 02 	call	0x44a	; 0x44a <__umulhisi3>
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	96 95       	lsr	r25
 314:	87 95       	ror	r24
 316:	96 95       	lsr	r25
 318:	87 95       	ror	r24
 31a:	80 5d       	subi	r24, 0xD0	; 208
 31c:	0e 94 29 01 	call	0x252	; 0x252 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 320:	98 01       	movw	r18, r16
 322:	36 95       	lsr	r19
 324:	27 95       	ror	r18
 326:	36 95       	lsr	r19
 328:	27 95       	ror	r18
 32a:	36 95       	lsr	r19
 32c:	27 95       	ror	r18
 32e:	a5 ec       	ldi	r26, 0xC5	; 197
 330:	b0 e2       	ldi	r27, 0x20	; 32
 332:	0e 94 25 02 	call	0x44a	; 0x44a <__umulhisi3>
 336:	ac 01       	movw	r20, r24
 338:	52 95       	swap	r21
 33a:	42 95       	swap	r20
 33c:	4f 70       	andi	r20, 0x0F	; 15
 33e:	45 27       	eor	r20, r21
 340:	5f 70       	andi	r21, 0x0F	; 15
 342:	45 27       	eor	r20, r21
 344:	9a 01       	movw	r18, r20
 346:	ad ec       	ldi	r26, 0xCD	; 205
 348:	bc ec       	ldi	r27, 0xCC	; 204
 34a:	0e 94 25 02 	call	0x44a	; 0x44a <__umulhisi3>
 34e:	96 95       	lsr	r25
 350:	87 95       	ror	r24
 352:	96 95       	lsr	r25
 354:	87 95       	ror	r24
 356:	96 95       	lsr	r25
 358:	87 95       	ror	r24
 35a:	9c 01       	movw	r18, r24
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	82 0f       	add	r24, r18
 36e:	93 1f       	adc	r25, r19
 370:	9a 01       	movw	r18, r20
 372:	28 1b       	sub	r18, r24
 374:	39 0b       	sbc	r19, r25
 376:	c9 01       	movw	r24, r18
 378:	80 5d       	subi	r24, 0xD0	; 208
 37a:	0e 94 29 01 	call	0x252	; 0x252 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 37e:	98 01       	movw	r18, r16
 380:	36 95       	lsr	r19
 382:	27 95       	ror	r18
 384:	36 95       	lsr	r19
 386:	27 95       	ror	r18
 388:	ab e7       	ldi	r26, 0x7B	; 123
 38a:	b4 e1       	ldi	r27, 0x14	; 20
 38c:	0e 94 25 02 	call	0x44a	; 0x44a <__umulhisi3>
 390:	ac 01       	movw	r20, r24
 392:	56 95       	lsr	r21
 394:	47 95       	ror	r20
 396:	9a 01       	movw	r18, r20
 398:	ad ec       	ldi	r26, 0xCD	; 205
 39a:	bc ec       	ldi	r27, 0xCC	; 204
 39c:	0e 94 25 02 	call	0x44a	; 0x44a <__umulhisi3>
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	9c 01       	movw	r18, r24
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	82 0f       	add	r24, r18
 3c0:	93 1f       	adc	r25, r19
 3c2:	9a 01       	movw	r18, r20
 3c4:	28 1b       	sub	r18, r24
 3c6:	39 0b       	sbc	r19, r25
 3c8:	c9 01       	movw	r24, r18
 3ca:	80 5d       	subi	r24, 0xD0	; 208
 3cc:	0e 94 29 01 	call	0x252	; 0x252 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 3d0:	98 01       	movw	r18, r16
 3d2:	ad ec       	ldi	r26, 0xCD	; 205
 3d4:	bc ec       	ldi	r27, 0xCC	; 204
 3d6:	0e 94 25 02 	call	0x44a	; 0x44a <__umulhisi3>
 3da:	ec 01       	movw	r28, r24
 3dc:	d6 95       	lsr	r29
 3de:	c7 95       	ror	r28
 3e0:	d6 95       	lsr	r29
 3e2:	c7 95       	ror	r28
 3e4:	d6 95       	lsr	r29
 3e6:	c7 95       	ror	r28
 3e8:	9e 01       	movw	r18, r28
 3ea:	0e 94 25 02 	call	0x44a	; 0x44a <__umulhisi3>
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	9c 01       	movw	r18, r24
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	82 0f       	add	r24, r18
 40e:	93 1f       	adc	r25, r19
 410:	9e 01       	movw	r18, r28
 412:	28 1b       	sub	r18, r24
 414:	39 0b       	sbc	r19, r25
 416:	c9 01       	movw	r24, r18
 418:	80 5d       	subi	r24, 0xD0	; 208
 41a:	0e 94 29 01 	call	0x252	; 0x252 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 41e:	ce 01       	movw	r24, r28
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	cc 0f       	add	r28, r28
 426:	dd 1f       	adc	r29, r29
 428:	cc 0f       	add	r28, r28
 42a:	dd 1f       	adc	r29, r29
 42c:	cc 0f       	add	r28, r28
 42e:	dd 1f       	adc	r29, r29
 430:	c8 0f       	add	r28, r24
 432:	d9 1f       	adc	r29, r25
 434:	c8 01       	movw	r24, r16
 436:	8c 1b       	sub	r24, r28
 438:	9d 0b       	sbc	r25, r29
 43a:	80 5d       	subi	r24, 0xD0	; 208
 43c:	0e 94 29 01 	call	0x252	; 0x252 <transmitByte>
}
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	08 95       	ret

0000044a <__umulhisi3>:
 44a:	a2 9f       	mul	r26, r18
 44c:	b0 01       	movw	r22, r0
 44e:	b3 9f       	mul	r27, r19
 450:	c0 01       	movw	r24, r0
 452:	a3 9f       	mul	r26, r19
 454:	70 0d       	add	r23, r0
 456:	81 1d       	adc	r24, r1
 458:	11 24       	eor	r1, r1
 45a:	91 1d       	adc	r25, r1
 45c:	b2 9f       	mul	r27, r18
 45e:	70 0d       	add	r23, r0
 460:	81 1d       	adc	r24, r1
 462:	11 24       	eor	r1, r1
 464:	91 1d       	adc	r25, r1
 466:	08 95       	ret

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
