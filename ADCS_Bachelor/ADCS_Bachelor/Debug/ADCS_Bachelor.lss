
ADCS_Bachelor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800100  00000550  000005e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000550  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001ee  008001ee  000006d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a2  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abe  00000000  00000000  00001e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a04  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  000032d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e5  00000000  00000000  0000359c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d20  00000000  00000000  00003c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000049a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3e       	cpi	r26, 0xEE	; 238
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae ee       	ldi	r26, 0xEE	; 238
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 3e       	cpi	r26, 0xEF	; 239
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a6 02 	jmp	0x54c	; 0x54c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#define UBRR_VALUE ((F_CPU / (BAUDRATE * 16UL)) - 1 )


int main(void)
{
	initUSART();
  a6:	0e 94 8a 01 	call	0x314	; 0x314 <initUSART>
	spiInit();
  aa:	0e 94 d7 00 	call	0x1ae	; 0x1ae <spiInit>
	printString("\r\nStarting connection test, please wait...");
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 a3 01 	call	0x346	; 0x346 <printString>
	printString("\r\nIf the program holds here, check your connections.");
  b6:	8c e2       	ldi	r24, 0x2C	; 44
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 a3 01 	call	0x346	; 0x346 <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	83 ed       	ldi	r24, 0xD3	; 211
  c2:	90 e3       	ldi	r25, 0x30	; 48
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x28>
  ce:	00 00       	nop
	_delay_ms(1000);
	WhoAmICheck();
  d0:	0e 94 2e 01 	call	0x25c	; 0x25c <WhoAmICheck>
	
	uint8_t testbyte = 0x00;
	uint8_t testbyte2 = 0x00;
		
	testbyte = SPIreadByte(PIN_XG, CTRL_REG4);
  d4:	6e e1       	ldi	r22, 0x1E	; 30
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 1e 01 	call	0x23c	; 0x23c <SPIreadByte>
  dc:	c8 2f       	mov	r28, r24
	printString("\r\nReading data from CTRL_REG4 (Expecting 56): ");
  de:	81 e6       	ldi	r24, 0x61	; 97
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 a3 01 	call	0x346	; 0x346 <printString>
	printByte(testbyte);
  e6:	8c 2f       	mov	r24, r28
  e8:	0e 94 b9 01 	call	0x372	; 0x372 <printByte>
	printString("");
  ec:	8f eb       	ldi	r24, 0xBF	; 191
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 a3 01 	call	0x346	; 0x346 <printString>
		
	testbyte2 = SPIreadByte(PIN_M, CTRL_REG3_M);
  f4:	62 e2       	ldi	r22, 0x22	; 34
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	0e 94 1e 01 	call	0x23c	; 0x23c <SPIreadByte>
  fc:	c8 2f       	mov	r28, r24
	printString("\r\nReading data from CTRL_REG3_M (Expecting 3): ");
  fe:	80 e9       	ldi	r24, 0x90	; 144
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	0e 94 a3 01 	call	0x346	; 0x346 <printString>
	printByte(testbyte2);
 106:	8c 2f       	mov	r24, r28
 108:	0e 94 b9 01 	call	0x372	; 0x372 <printByte>
	printString("");
 10c:	8f eb       	ldi	r24, 0xBF	; 191
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 a3 01 	call	0x346	; 0x346 <printString>
		
	
	initMag();
 114:	0e 94 af 00 	call	0x15e	; 0x15e <initMag>
	initGyro();
 118:	0e 94 8f 00 	call	0x11e	; 0x11e <initGyro>
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0x76>

0000011e <initGyro>:
void interuptGyro(void){
	
}


void calibGyro(void){
 11e:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <__data_end>
 122:	43 70       	andi	r20, 0x03	; 3
 124:	44 0f       	add	r20, r20
 126:	44 0f       	add	r20, r20
 128:	44 0f       	add	r20, r20
 12a:	40 6c       	ori	r20, 0xC0	; 192
 12c:	60 e1       	ldi	r22, 0x10	; 16
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPIwriteByte>
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	61 e1       	ldi	r22, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPIwriteByte>
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	62 e1       	ldi	r22, 0x12	; 18
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPIwriteByte>
 148:	48 e3       	ldi	r20, 0x38	; 56
 14a:	6e e1       	ldi	r22, 0x1E	; 30
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPIwriteByte>
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	63 e1       	ldi	r22, 0x13	; 19
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPIwriteByte>
 15c:	08 95       	ret

0000015e <initMag>:
		bit 0:		self-test enable */	
	//	Default CTRL_REG1_M = 0x10
	if(magTempCompensationEnable){tempRegValue = (1<<7);}
	tempRegValue |= (magXYPerformance & 0x3) << 5;
	tempRegValue |= (magSampleRate & 0x7) << 2;
	SPIwriteByte(PIN_M, CTRL_REG1_M, tempRegValue);
 15e:	4c e7       	ldi	r20, 0x7C	; 124
 160:	60 e2       	ldi	r22, 0x20	; 32
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPIwriteByte>
		bit 3:		reboot memory content
		bit 2:		configuration registers and user register reset function
		rest:		always 0 */
	//	Default CTRL_REG2_M = 0x00
	tempRegValue = 0;
	switch (magScale){
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16c:	8c 30       	cpi	r24, 0x0C	; 12
 16e:	31 f0       	breq	.+12     	; 0x17c <initMag+0x1e>
 170:	80 31       	cpi	r24, 0x10	; 16
 172:	31 f0       	breq	.+12     	; 0x180 <initMag+0x22>
 174:	88 30       	cpi	r24, 0x08	; 8
 176:	31 f4       	brne	.+12     	; 0x184 <initMag+0x26>
		case 8:
		tempRegValue |= (0x1 << 5);
 178:	40 e2       	ldi	r20, 0x20	; 32
 17a:	05 c0       	rjmp	.+10     	; 0x186 <initMag+0x28>
		break;
		case 12:
		tempRegValue |= (0x2 << 5);
 17c:	40 e4       	ldi	r20, 0x40	; 64
		break;
 17e:	03 c0       	rjmp	.+6      	; 0x186 <initMag+0x28>
		case 16:
		tempRegValue |= (0x3 << 5);
 180:	40 e6       	ldi	r20, 0x60	; 96
		break;
 182:	01 c0       	rjmp	.+2      	; 0x186 <initMag+0x28>
		bit 6-5:	full scale configuration
		bit 3:		reboot memory content
		bit 2:		configuration registers and user register reset function
		rest:		always 0 */
	//	Default CTRL_REG2_M = 0x00
	tempRegValue = 0;
 184:	40 e0       	ldi	r20, 0x00	; 0
		case 16:
		tempRegValue |= (0x3 << 5);
		break;
		// Otherwise we'll default to 4 gauss (00)
	}
	SPIwriteByte(PIN_M, CTRL_REG2_M, tempRegValue);
 186:	61 e2       	ldi	r22, 0x21	; 33
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPIwriteByte>
		rest:		always 0 */
	//	Default CTRL_REG3_M = 0x03
	tempRegValue = 0;
	if(magLowPowerEnable){ tempRegValue = (1<<5);}
	tempRegValue |= (magOperatingMode & 0x3);
	SPIwriteByte(PIN_M, CTRL_REG3_M, tempRegValue);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	62 e2       	ldi	r22, 0x22	; 34
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPIwriteByte>
		bit 1:		Endian data selection
		rest:		always 0 */
	//	Default CTRL_REG4_M = 0x00
	tempRegValue = 0;
	tempRegValue = (magZPerformance & 0x3) << 2;
	SPIwriteByte(PIN_M, CTRL_REG4_M, tempRegValue);
 198:	4c e0       	ldi	r20, 0x0C	; 12
 19a:	63 e2       	ldi	r22, 0x23	; 35
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPIwriteByte>
		bit 7:	fast read enable
		bit 6:	block data update for magnetic data
		rest:	always 0 */
	//	Default CTRL_REG5_M = 0x00
	tempRegValue = 0;
	SPIwriteByte(PIN_M, CTRL_REG5_M, tempRegValue);
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	64 e2       	ldi	r22, 0x24	; 36
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPIwriteByte>
 1ac:	08 95       	ret

000001ae <spiInit>:
#include <stdio.h>
#include "header.h"
#include "registers.h"

void spiInit(void){
	DDRB = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);			// MOSI, SCK, CS_M and CS_AG output ||DDB0 is for testing
 1ae:	8f e2       	ldi	r24, 0x2F	; 47
 1b0:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<PORTB2)|(1<<PORTB1)|(1<<PORTB0);						// CS_M and CS_AG start HIGH || PORTB0 is for testing
 1b2:	87 e0       	ldi	r24, 0x07	; 7
 1b4:	85 b9       	out	0x05, r24	; 5
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)|(1<<SPR1)|(1<<SPR0);	// * SPI enable, Master mode, MSB first, Clockdiv 128
 1b6:	8f e5       	ldi	r24, 0x5F	; 95
 1b8:	8c bd       	out	0x2c, r24	; 44
 1ba:	08 95       	ret

000001bc <spiTransfer>:
	
	return count;
}

uint8_t spiTransfer(uint8_t data) {
    SPDR = data;
 1bc:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
 1be:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
 1c0:	0d b4       	in	r0, 0x2d	; 45
 1c2:	07 fe       	sbrs	r0, 7
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <spiTransfer+0x4>
    return SPDR;
 1c6:	8e b5       	in	r24, 0x2e	; 46
  }
 1c8:	08 95       	ret

000001ca <SPIreadBytes>:
	return temp;
}

uint8_t SPIreadBytes(uint8_t csPin, uint8_t subAddress,
uint8_t * dest, uint8_t count)
{
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	8a 01       	movw	r16, r20
 1da:	d2 2e       	mov	r13, r18
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 1dc:	6f 73       	andi	r22, 0x3F	; 63
 1de:	60 68       	ori	r22, 0x80	; 128
	// Mag SPI port is different. If we're reading multiple bytes,
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == PIN_M) && count > 1)
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	21 f4       	brne	.+8      	; 0x1ec <SPIreadBytes+0x22>
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	92 17       	cp	r25, r18
 1e8:	08 f4       	brcc	.+2      	; 0x1ec <SPIreadBytes+0x22>
	rAddress |= 0x40;
 1ea:	60 64       	ori	r22, 0x40	; 64
	
	PORTB &= ~(1<<csPin);	// Initiate communication
 1ec:	95 b1       	in	r25, 0x05	; 5
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	79 01       	movw	r14, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <SPIreadBytes+0x30>
 1f6:	ee 0c       	add	r14, r14
 1f8:	ff 1c       	adc	r15, r15
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <SPIreadBytes+0x2c>
 1fe:	8e 2d       	mov	r24, r14
 200:	80 95       	com	r24
 202:	89 23       	and	r24, r25
 204:	85 b9       	out	0x05, r24	; 5
	spiTransfer(rAddress);
 206:	86 2f       	mov	r24, r22
 208:	0e 94 de 00 	call	0x1bc	; 0x1bc <spiTransfer>
	for (int i=0; i<count; i++)
 20c:	dd 20       	and	r13, r13
 20e:	51 f0       	breq	.+20     	; 0x224 <SPIreadBytes+0x5a>
 210:	e8 01       	movw	r28, r16
 212:	0d 0d       	add	r16, r13
 214:	11 1d       	adc	r17, r1
	{
		dest[i] = spiTransfer(0x00); // Read into destination array
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 de 00 	call	0x1bc	; 0x1bc <spiTransfer>
 21c:	89 93       	st	Y+, r24
	if ((csPin == PIN_M) && count > 1)
	rAddress |= 0x40;
	
	PORTB &= ~(1<<csPin);	// Initiate communication
	spiTransfer(rAddress);
	for (int i=0; i<count; i++)
 21e:	c0 17       	cp	r28, r16
 220:	d1 07       	cpc	r29, r17
 222:	c9 f7       	brne	.-14     	; 0x216 <SPIreadBytes+0x4c>
	{
		dest[i] = spiTransfer(0x00); // Read into destination array
	}
	PORTB |= (1<<csPin); // Close communication
 224:	85 b1       	in	r24, 0x05	; 5
 226:	e8 2a       	or	r14, r24
 228:	e5 b8       	out	0x05, r14	; 5
	
	return count;
}
 22a:	8d 2d       	mov	r24, r13
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	08 95       	ret

0000023c <SPIreadByte>:
																		// * Clock idle HIGH, Data Captured on Rising edge. SPI mode 3.
}


uint8_t SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	1f 92       	push	r1
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	// Use the multiple read function to read 1 byte.
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	ae 01       	movw	r20, r28
 24a:	4f 5f       	subi	r20, 0xFF	; 255
 24c:	5f 4f       	sbci	r21, 0xFF	; 255
 24e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SPIreadBytes>
	return temp;
}
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <WhoAmICheck>:
    asm volatile("nop");
    while (!(SPSR & _BV(SPIF))) ; // wait
    return SPDR;
  }
  
  void WhoAmICheck(void){
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
	  uint8_t testM = 0x00;
	  uint8_t testXG = 0x00;
	  uint16_t whoAmICombined = 0x0000;
	  //spiWrite(PIN_M, CTRL_REG3_M, 0b00000111);		//Needed to read from the Magnetometer registers.
	  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
 260:	6f e0       	ldi	r22, 0x0F	; 15
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 1e 01 	call	0x23c	; 0x23c <SPIreadByte>
 268:	c8 2f       	mov	r28, r24
	  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
 26a:	6f e0       	ldi	r22, 0x0F	; 15
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	0e 94 1e 01 	call	0x23c	; 0x23c <SPIreadByte>
	  whoAmICombined = (testXG << 8) | testM;
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	dc 2f       	mov	r29, r28
 276:	cc 27       	eor	r28, r28
 278:	c8 2b       	or	r28, r24
	  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
 27a:	80 ec       	ldi	r24, 0xC0	; 192
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 a3 01 	call	0x346	; 0x346 <printString>
	  printWord(whoAmICombined);
 282:	ce 01       	movw	r24, r28
 284:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <printWord>
	  while(whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP)){
 288:	cd 33       	cpi	r28, 0x3D	; 61
 28a:	d8 46       	sbci	r29, 0x68	; 104
 28c:	11 f1       	breq	.+68     	; 0x2d2 <WhoAmICheck+0x76>
		  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
 28e:	6f e0       	ldi	r22, 0x0F	; 15
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	0e 94 1e 01 	call	0x23c	; 0x23c <SPIreadByte>
 296:	c8 2f       	mov	r28, r24
		  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
 298:	6f e0       	ldi	r22, 0x0F	; 15
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 1e 01 	call	0x23c	; 0x23c <SPIreadByte>
		  whoAmICombined = (testXG << 8) | (testM);
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
 2a2:	d8 2b       	or	r29, r24
		  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
 2a4:	80 ec       	ldi	r24, 0xC0	; 192
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	0e 94 a3 01 	call	0x346	; 0x346 <printString>
		  printWord(whoAmICombined);
 2ac:	ce 01       	movw	r24, r28
 2ae:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <printWord>
		  printString("");
 2b2:	8f eb       	ldi	r24, 0xBF	; 191
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 a3 01 	call	0x346	; 0x346 <printString>
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	91 ee       	ldi	r25, 0xE1	; 225
 2be:	24 e0       	ldi	r18, 0x04	; 4
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	20 40       	sbci	r18, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <WhoAmICheck+0x64>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <WhoAmICheck+0x6e>
 2ca:	00 00       	nop
	  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
	  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
	  whoAmICombined = (testXG << 8) | testM;
	  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
	  printWord(whoAmICombined);
	  while(whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP)){
 2cc:	cd 33       	cpi	r28, 0x3D	; 61
 2ce:	d8 46       	sbci	r29, 0x68	; 104
 2d0:	f1 f6       	brne	.-68     	; 0x28e <WhoAmICheck+0x32>
		  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
		  printWord(whoAmICombined);
		  printString("");
		  _delay_ms(100);
	  }
  }
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <SPIwriteByte>:
  
  void SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
  {
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	14 2f       	mov	r17, r20
	  PORTB &= ~(1<<csPin); // Initiate communication
 2e0:	95 b1       	in	r25, 0x05	; 5
 2e2:	c1 e0       	ldi	r28, 0x01	; 1
 2e4:	d0 e0       	ldi	r29, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <SPIwriteByte+0x14>
 2e8:	cc 0f       	add	r28, r28
 2ea:	dd 1f       	adc	r29, r29
 2ec:	8a 95       	dec	r24
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <SPIwriteByte+0x10>
 2f0:	8c 2f       	mov	r24, r28
 2f2:	80 95       	com	r24
 2f4:	98 23       	and	r25, r24
 2f6:	95 b9       	out	0x05, r25	; 5
	  
	  // If write, bit 0 (MSB) should be 0
	  // If single write, bit 1 should be 0
	  spiTransfer(subAddress & 0x3F); // Send Address
 2f8:	86 2f       	mov	r24, r22
 2fa:	8f 73       	andi	r24, 0x3F	; 63
 2fc:	0e 94 de 00 	call	0x1bc	; 0x1bc <spiTransfer>
	  spiTransfer(data); // Send data
 300:	81 2f       	mov	r24, r17
 302:	0e 94 de 00 	call	0x1bc	; 0x1bc <spiTransfer>
	  
	  PORTB |= (1<<csPin); // Close communication
 306:	85 b1       	in	r24, 0x05	; 5
 308:	c8 2b       	or	r28, r24
 30a:	c5 b9       	out	0x05, r28	; 5
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	08 95       	ret

00000314 <initUSART>:
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
}
 314:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 318:	87 e6       	ldi	r24, 0x67	; 103
 31a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 31e:	e0 ec       	ldi	r30, 0xC0	; 192
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	8d 7f       	andi	r24, 0xFD	; 253
 326:	80 83       	st	Z, r24
 328:	88 e1       	ldi	r24, 0x18	; 24
 32a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 32e:	86 e0       	ldi	r24, 0x06	; 6
 330:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 334:	08 95       	ret

00000336 <transmitByte>:
 336:	e0 ec       	ldi	r30, 0xC0	; 192
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	90 81       	ld	r25, Z
 33c:	95 ff       	sbrs	r25, 5
 33e:	fd cf       	rjmp	.-6      	; 0x33a <transmitByte+0x4>
 340:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 344:	08 95       	ret

00000346 <printString>:
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	fc 01       	movw	r30, r24
 34e:	80 81       	ld	r24, Z
 350:	88 23       	and	r24, r24
 352:	59 f0       	breq	.+22     	; 0x36a <printString+0x24>
 354:	8f 01       	movw	r16, r30
 356:	c0 e0       	ldi	r28, 0x00	; 0
 358:	0e 94 9b 01 	call	0x336	; 0x336 <transmitByte>
 35c:	cf 5f       	subi	r28, 0xFF	; 255
 35e:	f8 01       	movw	r30, r16
 360:	ec 0f       	add	r30, r28
 362:	f1 1d       	adc	r31, r1
 364:	80 81       	ld	r24, Z
 366:	81 11       	cpse	r24, r1
 368:	f7 cf       	rjmp	.-18     	; 0x358 <printString+0x12>
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	08 95       	ret

00000372 <printByte>:

void printByte(uint8_t byte) {
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	d8 2f       	mov	r29, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 378:	89 e2       	ldi	r24, 0x29	; 41
 37a:	d8 9f       	mul	r29, r24
 37c:	81 2d       	mov	r24, r1
 37e:	11 24       	eor	r1, r1
 380:	82 95       	swap	r24
 382:	8f 70       	andi	r24, 0x0F	; 15
 384:	80 5d       	subi	r24, 0xD0	; 208
 386:	0e 94 9b 01 	call	0x336	; 0x336 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 38a:	9d ec       	ldi	r25, 0xCD	; 205
 38c:	d9 9f       	mul	r29, r25
 38e:	c1 2d       	mov	r28, r1
 390:	11 24       	eor	r1, r1
 392:	c6 95       	lsr	r28
 394:	c6 95       	lsr	r28
 396:	c6 95       	lsr	r28
 398:	c9 9f       	mul	r28, r25
 39a:	91 2d       	mov	r25, r1
 39c:	11 24       	eor	r1, r1
 39e:	96 95       	lsr	r25
 3a0:	96 95       	lsr	r25
 3a2:	96 95       	lsr	r25
 3a4:	99 0f       	add	r25, r25
 3a6:	89 2f       	mov	r24, r25
 3a8:	88 0f       	add	r24, r24
 3aa:	88 0f       	add	r24, r24
 3ac:	98 0f       	add	r25, r24
 3ae:	8c 2f       	mov	r24, r28
 3b0:	89 1b       	sub	r24, r25
 3b2:	80 5d       	subi	r24, 0xD0	; 208
 3b4:	0e 94 9b 01 	call	0x336	; 0x336 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 3b8:	cc 0f       	add	r28, r28
 3ba:	8c 2f       	mov	r24, r28
 3bc:	88 0f       	add	r24, r24
 3be:	88 0f       	add	r24, r24
 3c0:	c8 0f       	add	r28, r24
 3c2:	8d 2f       	mov	r24, r29
 3c4:	8c 1b       	sub	r24, r28
 3c6:	80 5d       	subi	r24, 0xD0	; 208
 3c8:	0e 94 9b 01 	call	0x336	; 0x336 <transmitByte>
}
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <printWord>:

void printWord(uint16_t word) {
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	8c 01       	movw	r16, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 3dc:	9c 01       	movw	r18, r24
 3de:	32 95       	swap	r19
 3e0:	22 95       	swap	r18
 3e2:	2f 70       	andi	r18, 0x0F	; 15
 3e4:	23 27       	eor	r18, r19
 3e6:	3f 70       	andi	r19, 0x0F	; 15
 3e8:	23 27       	eor	r18, r19
 3ea:	a7 e4       	ldi	r26, 0x47	; 71
 3ec:	b3 e0       	ldi	r27, 0x03	; 3
 3ee:	0e 94 97 02 	call	0x52e	; 0x52e <__umulhisi3>
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	80 5d       	subi	r24, 0xD0	; 208
 400:	0e 94 9b 01 	call	0x336	; 0x336 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 404:	98 01       	movw	r18, r16
 406:	36 95       	lsr	r19
 408:	27 95       	ror	r18
 40a:	36 95       	lsr	r19
 40c:	27 95       	ror	r18
 40e:	36 95       	lsr	r19
 410:	27 95       	ror	r18
 412:	a5 ec       	ldi	r26, 0xC5	; 197
 414:	b0 e2       	ldi	r27, 0x20	; 32
 416:	0e 94 97 02 	call	0x52e	; 0x52e <__umulhisi3>
 41a:	ac 01       	movw	r20, r24
 41c:	52 95       	swap	r21
 41e:	42 95       	swap	r20
 420:	4f 70       	andi	r20, 0x0F	; 15
 422:	45 27       	eor	r20, r21
 424:	5f 70       	andi	r21, 0x0F	; 15
 426:	45 27       	eor	r20, r21
 428:	9a 01       	movw	r18, r20
 42a:	ad ec       	ldi	r26, 0xCD	; 205
 42c:	bc ec       	ldi	r27, 0xCC	; 204
 42e:	0e 94 97 02 	call	0x52e	; 0x52e <__umulhisi3>
 432:	96 95       	lsr	r25
 434:	87 95       	ror	r24
 436:	96 95       	lsr	r25
 438:	87 95       	ror	r24
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	9c 01       	movw	r18, r24
 440:	22 0f       	add	r18, r18
 442:	33 1f       	adc	r19, r19
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	82 0f       	add	r24, r18
 452:	93 1f       	adc	r25, r19
 454:	9a 01       	movw	r18, r20
 456:	28 1b       	sub	r18, r24
 458:	39 0b       	sbc	r19, r25
 45a:	c9 01       	movw	r24, r18
 45c:	80 5d       	subi	r24, 0xD0	; 208
 45e:	0e 94 9b 01 	call	0x336	; 0x336 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 462:	98 01       	movw	r18, r16
 464:	36 95       	lsr	r19
 466:	27 95       	ror	r18
 468:	36 95       	lsr	r19
 46a:	27 95       	ror	r18
 46c:	ab e7       	ldi	r26, 0x7B	; 123
 46e:	b4 e1       	ldi	r27, 0x14	; 20
 470:	0e 94 97 02 	call	0x52e	; 0x52e <__umulhisi3>
 474:	ac 01       	movw	r20, r24
 476:	56 95       	lsr	r21
 478:	47 95       	ror	r20
 47a:	9a 01       	movw	r18, r20
 47c:	ad ec       	ldi	r26, 0xCD	; 205
 47e:	bc ec       	ldi	r27, 0xCC	; 204
 480:	0e 94 97 02 	call	0x52e	; 0x52e <__umulhisi3>
 484:	96 95       	lsr	r25
 486:	87 95       	ror	r24
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	96 95       	lsr	r25
 48e:	87 95       	ror	r24
 490:	9c 01       	movw	r18, r24
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	82 0f       	add	r24, r18
 4a4:	93 1f       	adc	r25, r19
 4a6:	9a 01       	movw	r18, r20
 4a8:	28 1b       	sub	r18, r24
 4aa:	39 0b       	sbc	r19, r25
 4ac:	c9 01       	movw	r24, r18
 4ae:	80 5d       	subi	r24, 0xD0	; 208
 4b0:	0e 94 9b 01 	call	0x336	; 0x336 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 4b4:	98 01       	movw	r18, r16
 4b6:	ad ec       	ldi	r26, 0xCD	; 205
 4b8:	bc ec       	ldi	r27, 0xCC	; 204
 4ba:	0e 94 97 02 	call	0x52e	; 0x52e <__umulhisi3>
 4be:	ec 01       	movw	r28, r24
 4c0:	d6 95       	lsr	r29
 4c2:	c7 95       	ror	r28
 4c4:	d6 95       	lsr	r29
 4c6:	c7 95       	ror	r28
 4c8:	d6 95       	lsr	r29
 4ca:	c7 95       	ror	r28
 4cc:	9e 01       	movw	r18, r28
 4ce:	0e 94 97 02 	call	0x52e	; 0x52e <__umulhisi3>
 4d2:	96 95       	lsr	r25
 4d4:	87 95       	ror	r24
 4d6:	96 95       	lsr	r25
 4d8:	87 95       	ror	r24
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	9c 01       	movw	r18, r24
 4e0:	22 0f       	add	r18, r18
 4e2:	33 1f       	adc	r19, r19
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	82 0f       	add	r24, r18
 4f2:	93 1f       	adc	r25, r19
 4f4:	9e 01       	movw	r18, r28
 4f6:	28 1b       	sub	r18, r24
 4f8:	39 0b       	sbc	r19, r25
 4fa:	c9 01       	movw	r24, r18
 4fc:	80 5d       	subi	r24, 0xD0	; 208
 4fe:	0e 94 9b 01 	call	0x336	; 0x336 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 502:	ce 01       	movw	r24, r28
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	cc 0f       	add	r28, r28
 50a:	dd 1f       	adc	r29, r29
 50c:	cc 0f       	add	r28, r28
 50e:	dd 1f       	adc	r29, r29
 510:	cc 0f       	add	r28, r28
 512:	dd 1f       	adc	r29, r29
 514:	c8 0f       	add	r28, r24
 516:	d9 1f       	adc	r29, r25
 518:	c8 01       	movw	r24, r16
 51a:	8c 1b       	sub	r24, r28
 51c:	9d 0b       	sbc	r25, r29
 51e:	80 5d       	subi	r24, 0xD0	; 208
 520:	0e 94 9b 01 	call	0x336	; 0x336 <transmitByte>
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	08 95       	ret

0000052e <__umulhisi3>:
 52e:	a2 9f       	mul	r26, r18
 530:	b0 01       	movw	r22, r0
 532:	b3 9f       	mul	r27, r19
 534:	c0 01       	movw	r24, r0
 536:	a3 9f       	mul	r26, r19
 538:	70 0d       	add	r23, r0
 53a:	81 1d       	adc	r24, r1
 53c:	11 24       	eor	r1, r1
 53e:	91 1d       	adc	r25, r1
 540:	b2 9f       	mul	r27, r18
 542:	70 0d       	add	r23, r0
 544:	81 1d       	adc	r24, r1
 546:	11 24       	eor	r1, r1
 548:	91 1d       	adc	r25, r1
 54a:	08 95       	ret

0000054c <_exit>:
 54c:	f8 94       	cli

0000054e <__stop_program>:
 54e:	ff cf       	rjmp	.-2      	; 0x54e <__stop_program>
