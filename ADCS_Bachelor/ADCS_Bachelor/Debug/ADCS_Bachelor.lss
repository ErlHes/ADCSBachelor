
ADCS_Bachelor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  000005b4  00000628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ed6  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c72  00000000  00000000  00002836  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c15  00000000  00000000  000034a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000414  00000000  00000000  000040c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000082c  00000000  00000000  000044d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001156  00000000  00000000  00004d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00005e56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  9e:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <readGyro>:
	SPIreadBytes(PIN_M, axis_address, temp, 2);
	uint16_t m = (temp[1] << 8 | temp[0]);
	return m;
}

uint16_t readGyro(uint8_t axis_address){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <readGyro+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp[2];
	SPIreadBytes(PIN_XG, axis_address, temp, 2);
  b0:	22 e0       	ldi	r18, 0x02	; 2
  b2:	ae 01       	movw	r20, r28
  b4:	4f 5f       	subi	r20, 0xFF	; 255
  b6:	5f 4f       	sbci	r21, 0xFF	; 255
  b8:	68 2f       	mov	r22, r24
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 17 01 	call	0x22e	; 0x22e <SPIreadBytes>
	uint16_t g = (temp[1] << 8 | temp[0]);
  c0:	8a 81       	ldd	r24, Y+2	; 0x02
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	98 2f       	mov	r25, r24
  c6:	88 27       	eor	r24, r24
  c8:	29 81       	ldd	r18, Y+1	; 0x01
	return g;
  ca:	82 2b       	or	r24, r18
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <main>:
#define UBRR_VALUE ((F_CPU / (BAUDRATE * 16UL)) - 1 )


int main(void)
{
	initUSART();
  d6:	0e 94 bc 01 	call	0x378	; 0x378 <initUSART>
	spiInit();
  da:	0e 94 09 01 	call	0x212	; 0x212 <spiInit>
	printString("\r\nStarting connection test, please wait...");
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
	printString("\r\nIf the program holds here, check your connections.");
  e6:	8b e2       	ldi	r24, 0x2B	; 43
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	83 ed       	ldi	r24, 0xD3	; 211
  f2:	90 e3       	ldi	r25, 0x30	; 48
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x1e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x28>
  fe:	00 00       	nop
	_delay_ms(1000);
	WhoAmICheck();
 100:	0e 94 60 01 	call	0x2c0	; 0x2c0 <WhoAmICheck>
	
	uint8_t testbyte = 0x00;
	uint8_t testbyte2 = 0x00;
		
	testbyte = SPIreadByte(PIN_XG, CTRL_REG4);
 104:	6e e1       	ldi	r22, 0x1E	; 30
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPIreadByte>
 10c:	c8 2f       	mov	r28, r24
	printString("\r\nReading data from CTRL_REG4 (Expecting 56): ");
 10e:	80 e6       	ldi	r24, 0x60	; 96
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
	printByte(testbyte);
 116:	8c 2f       	mov	r24, r28
 118:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <printByte>
	printString("");
 11c:	8e eb       	ldi	r24, 0xBE	; 190
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
		
	testbyte2 = SPIreadByte(PIN_M, CTRL_REG3_M);
 124:	62 e2       	ldi	r22, 0x22	; 34
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPIreadByte>
 12c:	c8 2f       	mov	r28, r24
	printString("\r\nReading data from CTRL_REG3_M (Expecting 3): ");
 12e:	8f e8       	ldi	r24, 0x8F	; 143
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
	printByte(testbyte2);
 136:	8c 2f       	mov	r24, r28
 138:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <printByte>
	printString("");
 13c:	8e eb       	ldi	r24, 0xBE	; 190
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
	uint16_t mz;
	uint16_t gx;
	uint16_t gy;
	uint16_t gz;
	
	initMag();
 144:	0e 94 ef 00 	call	0x1de	; 0x1de <initMag>
	initGyro();
 148:	0e 94 d5 00 	call	0x1aa	; 0x1aa <initGyro>
		
		_delay_ms(10);		
		*/
		
		
		gx = readGyro(OUT_X_L_G);
 14c:	88 e1       	ldi	r24, 0x18	; 24
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <readGyro>
 152:	7c 01       	movw	r14, r24
		gy = readGyro(OUT_Y_L_G);
 154:	8a e1       	ldi	r24, 0x1A	; 26
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <readGyro>
 15a:	8c 01       	movw	r16, r24
		gz = readGyro(OUT_Z_L_G);
 15c:	8c e1       	ldi	r24, 0x1C	; 28
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <readGyro>
 162:	ec 01       	movw	r28, r24
		
		printString("\r\nReading Gyroscope: ");
 164:	8f eb       	ldi	r24, 0xBF	; 191
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
		printString("\r\ngx: ");
 16c:	85 ed       	ldi	r24, 0xD5	; 213
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
		printWord(gx);
 174:	c7 01       	movw	r24, r14
 176:	0e 94 1b 02 	call	0x436	; 0x436 <printWord>
		
		printString("\r\ngy: ");
 17a:	8c ed       	ldi	r24, 0xDC	; 220
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
		printWord(gy);
 182:	c8 01       	movw	r24, r16
 184:	0e 94 1b 02 	call	0x436	; 0x436 <printWord>
		
		printString("\r\ngz: ");
 188:	83 ee       	ldi	r24, 0xE3	; 227
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
		printWord(gz);
 190:	ce 01       	movw	r24, r28
 192:	0e 94 1b 02 	call	0x436	; 0x436 <printWord>
 196:	2f e7       	ldi	r18, 0x7F	; 127
 198:	89 ea       	ldi	r24, 0xA9	; 169
 19a:	93 e0       	ldi	r25, 0x03	; 3
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0xc6>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0xd0>
 1a6:	00 00       	nop
 1a8:	d1 cf       	rjmp	.-94     	; 0x14c <main+0x76>

000001aa <initGyro>:
void interuptGyro(void){
	
}


void calibGyro(void){
 1aa:	40 ec       	ldi	r20, 0xC0	; 192
 1ac:	60 e1       	ldi	r22, 0x10	; 16
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 9e 01 	call	0x33c	; 0x33c <SPIwriteByte>
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	61 e1       	ldi	r22, 0x11	; 17
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 9e 01 	call	0x33c	; 0x33c <SPIwriteByte>
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	62 e1       	ldi	r22, 0x12	; 18
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 9e 01 	call	0x33c	; 0x33c <SPIwriteByte>
 1c8:	48 e3       	ldi	r20, 0x38	; 56
 1ca:	6e e1       	ldi	r22, 0x1E	; 30
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 9e 01 	call	0x33c	; 0x33c <SPIwriteByte>
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	63 e1       	ldi	r22, 0x13	; 19
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 9e 01 	call	0x33c	; 0x33c <SPIwriteByte>
 1dc:	08 95       	ret

000001de <initMag>:
		bit 0:		self-test enable */	
	//	Default CTRL_REG1_M = 0x10
	if(magTempCompensationEnable){tempRegValue = (1<<7);}
	tempRegValue |= (magXYPerformance & 0x3) << 5;
	tempRegValue |= (magSampleRate & 0x7) << 2;
	SPIwriteByte(PIN_M, CTRL_REG1_M, tempRegValue);
 1de:	4c e7       	ldi	r20, 0x7C	; 124
 1e0:	60 e2       	ldi	r22, 0x20	; 32
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 9e 01 	call	0x33c	; 0x33c <SPIwriteByte>
		case 16:
		tempRegValue |= (0x3 << 5);
		break;
		// Otherwise we'll default to 4 gauss (00)
	}
	SPIwriteByte(PIN_M, CTRL_REG2_M, tempRegValue);
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	61 e2       	ldi	r22, 0x21	; 33
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 9e 01 	call	0x33c	; 0x33c <SPIwriteByte>
		rest:		always 0 */
	//	Default CTRL_REG3_M = 0x03
	tempRegValue = 0;
	if(magLowPowerEnable){ tempRegValue = (1<<5);}
	tempRegValue |= (magOperatingMode & 0x3);
	SPIwriteByte(PIN_M, CTRL_REG3_M, tempRegValue);
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	62 e2       	ldi	r22, 0x22	; 34
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	0e 94 9e 01 	call	0x33c	; 0x33c <SPIwriteByte>
		bit 1:		Endian data selection
		rest:		always 0 */
	//	Default CTRL_REG4_M = 0x00
	tempRegValue = 0;
	tempRegValue = (magZPerformance & 0x3) << 2;
	SPIwriteByte(PIN_M, CTRL_REG4_M, tempRegValue);
 1fc:	4c e0       	ldi	r20, 0x0C	; 12
 1fe:	63 e2       	ldi	r22, 0x23	; 35
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	0e 94 9e 01 	call	0x33c	; 0x33c <SPIwriteByte>
		bit 7:	fast read enable
		bit 6:	block data update for magnetic data
		rest:	always 0 */
	//	Default CTRL_REG5_M = 0x00
	tempRegValue = 0;
	SPIwriteByte(PIN_M, CTRL_REG5_M, tempRegValue);
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	64 e2       	ldi	r22, 0x24	; 36
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 9e 01 	call	0x33c	; 0x33c <SPIwriteByte>
 210:	08 95       	ret

00000212 <spiInit>:
#include <stdio.h>
#include "header.h"
#include "registers.h"

void spiInit(void){
	DDRB = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);			// MOSI, SCK, CS_M and CS_AG output ||DDB0 is for testing
 212:	8f e2       	ldi	r24, 0x2F	; 47
 214:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<PORTB2)|(1<<PORTB1)|(1<<PORTB0);						// CS_M and CS_AG start HIGH || PORTB0 is for testing
 216:	87 e0       	ldi	r24, 0x07	; 7
 218:	85 b9       	out	0x05, r24	; 5
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)|(1<<SPR1)|(1<<SPR0);	// * SPI enable, Master mode, MSB first, Clockdiv 128
 21a:	8f e5       	ldi	r24, 0x5F	; 95
 21c:	8c bd       	out	0x2c, r24	; 44
 21e:	08 95       	ret

00000220 <spiTransfer>:
	
	return count;
}

uint8_t spiTransfer(uint8_t data) {
    SPDR = data;
 220:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
 222:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
 224:	0d b4       	in	r0, 0x2d	; 45
 226:	07 fe       	sbrs	r0, 7
 228:	fd cf       	rjmp	.-6      	; 0x224 <spiTransfer+0x4>
    return SPDR;
 22a:	8e b5       	in	r24, 0x2e	; 46
  }
 22c:	08 95       	ret

0000022e <SPIreadBytes>:
	return temp;
}

uint8_t SPIreadBytes(uint8_t csPin, uint8_t subAddress,
uint8_t * dest, uint8_t count)
{
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	8a 01       	movw	r16, r20
 23e:	d2 2e       	mov	r13, r18
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 240:	6f 73       	andi	r22, 0x3F	; 63
 242:	60 68       	ori	r22, 0x80	; 128
	// Mag SPI port is different. If we're reading multiple bytes,
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == PIN_M) && count > 1)
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	21 f4       	brne	.+8      	; 0x250 <SPIreadBytes+0x22>
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	92 17       	cp	r25, r18
 24c:	08 f4       	brcc	.+2      	; 0x250 <SPIreadBytes+0x22>
	rAddress |= 0x40;
 24e:	60 64       	ori	r22, 0x40	; 64
	
	PORTB &= ~(1<<csPin);	// Initiate communication
 250:	95 b1       	in	r25, 0x05	; 5
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	79 01       	movw	r14, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <SPIreadBytes+0x30>
 25a:	ee 0c       	add	r14, r14
 25c:	ff 1c       	adc	r15, r15
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <SPIreadBytes+0x2c>
 262:	8e 2d       	mov	r24, r14
 264:	80 95       	com	r24
 266:	89 23       	and	r24, r25
 268:	85 b9       	out	0x05, r24	; 5
	spiTransfer(rAddress);
 26a:	86 2f       	mov	r24, r22
 26c:	0e 94 10 01 	call	0x220	; 0x220 <spiTransfer>
	for (int i=0; i<count; i++)
 270:	dd 20       	and	r13, r13
 272:	51 f0       	breq	.+20     	; 0x288 <SPIreadBytes+0x5a>
 274:	e8 01       	movw	r28, r16
 276:	0d 0d       	add	r16, r13
 278:	11 1d       	adc	r17, r1
	{
		dest[i] = spiTransfer(0x00); // Read into destination array
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 10 01 	call	0x220	; 0x220 <spiTransfer>
 280:	89 93       	st	Y+, r24
	if ((csPin == PIN_M) && count > 1)
	rAddress |= 0x40;
	
	PORTB &= ~(1<<csPin);	// Initiate communication
	spiTransfer(rAddress);
	for (int i=0; i<count; i++)
 282:	c0 17       	cp	r28, r16
 284:	d1 07       	cpc	r29, r17
 286:	c9 f7       	brne	.-14     	; 0x27a <SPIreadBytes+0x4c>
	{
		dest[i] = spiTransfer(0x00); // Read into destination array
	}
	PORTB |= (1<<csPin); // Close communication
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	e8 2a       	or	r14, r24
 28c:	e5 b8       	out	0x05, r14	; 5
	
	return count;
}
 28e:	8d 2d       	mov	r24, r13
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	df 90       	pop	r13
 29e:	08 95       	ret

000002a0 <SPIreadByte>:
																		// * Clock idle HIGH, Data Captured on Rising edge. SPI mode 3.
}


uint8_t SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	1f 92       	push	r1
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	// Use the multiple read function to read 1 byte.
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	ae 01       	movw	r20, r28
 2ae:	4f 5f       	subi	r20, 0xFF	; 255
 2b0:	5f 4f       	sbci	r21, 0xFF	; 255
 2b2:	0e 94 17 01 	call	0x22e	; 0x22e <SPIreadBytes>
	return temp;
}
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	0f 90       	pop	r0
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <WhoAmICheck>:
    asm volatile("nop");
    while (!(SPSR & _BV(SPIF))) ; // wait
    return SPDR;
  }
  
  void WhoAmICheck(void){
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
	  uint8_t testM = 0x00;
	  uint8_t testXG = 0x00;
	  uint16_t whoAmICombined = 0x0000;
	  //spiWrite(PIN_M, CTRL_REG3_M, 0b00000111);		//Needed to read from the Magnetometer registers.
	  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
 2c4:	6f e0       	ldi	r22, 0x0F	; 15
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPIreadByte>
 2cc:	c8 2f       	mov	r28, r24
	  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
 2ce:	6f e0       	ldi	r22, 0x0F	; 15
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPIreadByte>
	  whoAmICombined = (testXG << 8) | testM;
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
 2d8:	dc 2f       	mov	r29, r28
 2da:	cc 27       	eor	r28, r28
 2dc:	c8 2b       	or	r28, r24
	  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
 2de:	8a ee       	ldi	r24, 0xEA	; 234
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
	  printWord(whoAmICombined);
 2e6:	ce 01       	movw	r24, r28
 2e8:	0e 94 1b 02 	call	0x436	; 0x436 <printWord>
	  while(whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP)){
 2ec:	cd 33       	cpi	r28, 0x3D	; 61
 2ee:	d8 46       	sbci	r29, 0x68	; 104
 2f0:	11 f1       	breq	.+68     	; 0x336 <WhoAmICheck+0x76>
		  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
 2f2:	6f e0       	ldi	r22, 0x0F	; 15
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPIreadByte>
 2fa:	c8 2f       	mov	r28, r24
		  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
 2fc:	6f e0       	ldi	r22, 0x0F	; 15
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPIreadByte>
		  whoAmICombined = (testXG << 8) | (testM);
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	d8 2b       	or	r29, r24
		  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
 308:	8a ee       	ldi	r24, 0xEA	; 234
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
		  printWord(whoAmICombined);
 310:	ce 01       	movw	r24, r28
 312:	0e 94 1b 02 	call	0x436	; 0x436 <printWord>
		  printString("");
 316:	8e eb       	ldi	r24, 0xBE	; 190
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printString>
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	91 ee       	ldi	r25, 0xE1	; 225
 322:	24 e0       	ldi	r18, 0x04	; 4
 324:	81 50       	subi	r24, 0x01	; 1
 326:	90 40       	sbci	r25, 0x00	; 0
 328:	20 40       	sbci	r18, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <WhoAmICheck+0x64>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <WhoAmICheck+0x6e>
 32e:	00 00       	nop
	  testXG = SPIreadByte(PIN_XG, WHO_AM_I_XG);
	  testM = SPIreadByte(PIN_M, WHO_AM_I_M);
	  whoAmICombined = (testXG << 8) | testM;
	  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
	  printWord(whoAmICombined);
	  while(whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP)){
 330:	cd 33       	cpi	r28, 0x3D	; 61
 332:	d8 46       	sbci	r29, 0x68	; 104
 334:	f1 f6       	brne	.-68     	; 0x2f2 <WhoAmICheck+0x32>
		  printString("\r\n WHO_AM_I_CHECK (correct result is 26685: ");
		  printWord(whoAmICombined);
		  printString("");
		  _delay_ms(100);
	  }
  }
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <SPIwriteByte>:
  
  void SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
  {
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	14 2f       	mov	r17, r20
	  PORTB &= ~(1<<csPin); // Initiate communication
 344:	95 b1       	in	r25, 0x05	; 5
 346:	c1 e0       	ldi	r28, 0x01	; 1
 348:	d0 e0       	ldi	r29, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <SPIwriteByte+0x14>
 34c:	cc 0f       	add	r28, r28
 34e:	dd 1f       	adc	r29, r29
 350:	8a 95       	dec	r24
 352:	e2 f7       	brpl	.-8      	; 0x34c <SPIwriteByte+0x10>
 354:	8c 2f       	mov	r24, r28
 356:	80 95       	com	r24
 358:	98 23       	and	r25, r24
 35a:	95 b9       	out	0x05, r25	; 5
	  
	  // If write, bit 0 (MSB) should be 0
	  // If single write, bit 1 should be 0
	  spiTransfer(subAddress & 0x3F); // Send Address
 35c:	86 2f       	mov	r24, r22
 35e:	8f 73       	andi	r24, 0x3F	; 63
 360:	0e 94 10 01 	call	0x220	; 0x220 <spiTransfer>
	  spiTransfer(data); // Send data
 364:	81 2f       	mov	r24, r17
 366:	0e 94 10 01 	call	0x220	; 0x220 <spiTransfer>
	  
	  PORTB |= (1<<csPin); // Close communication
 36a:	85 b1       	in	r24, 0x05	; 5
 36c:	c8 2b       	or	r28, r24
 36e:	c5 b9       	out	0x05, r28	; 5
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	08 95       	ret

00000378 <initUSART>:
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
}
 378:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 37c:	87 e6       	ldi	r24, 0x67	; 103
 37e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 382:	e0 ec       	ldi	r30, 0xC0	; 192
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	8d 7f       	andi	r24, 0xFD	; 253
 38a:	80 83       	st	Z, r24
 38c:	88 e1       	ldi	r24, 0x18	; 24
 38e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 392:	86 e0       	ldi	r24, 0x06	; 6
 394:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 398:	08 95       	ret

0000039a <transmitByte>:
 39a:	e0 ec       	ldi	r30, 0xC0	; 192
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	90 81       	ld	r25, Z
 3a0:	95 ff       	sbrs	r25, 5
 3a2:	fd cf       	rjmp	.-6      	; 0x39e <transmitByte+0x4>
 3a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3a8:	08 95       	ret

000003aa <printString>:
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	fc 01       	movw	r30, r24
 3b2:	80 81       	ld	r24, Z
 3b4:	88 23       	and	r24, r24
 3b6:	59 f0       	breq	.+22     	; 0x3ce <printString+0x24>
 3b8:	8f 01       	movw	r16, r30
 3ba:	c0 e0       	ldi	r28, 0x00	; 0
 3bc:	0e 94 cd 01 	call	0x39a	; 0x39a <transmitByte>
 3c0:	cf 5f       	subi	r28, 0xFF	; 255
 3c2:	f8 01       	movw	r30, r16
 3c4:	ec 0f       	add	r30, r28
 3c6:	f1 1d       	adc	r31, r1
 3c8:	80 81       	ld	r24, Z
 3ca:	81 11       	cpse	r24, r1
 3cc:	f7 cf       	rjmp	.-18     	; 0x3bc <printString+0x12>
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	08 95       	ret

000003d6 <printByte>:

void printByte(uint8_t byte) {
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	d8 2f       	mov	r29, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 3dc:	89 e2       	ldi	r24, 0x29	; 41
 3de:	d8 9f       	mul	r29, r24
 3e0:	81 2d       	mov	r24, r1
 3e2:	11 24       	eor	r1, r1
 3e4:	82 95       	swap	r24
 3e6:	8f 70       	andi	r24, 0x0F	; 15
 3e8:	80 5d       	subi	r24, 0xD0	; 208
 3ea:	0e 94 cd 01 	call	0x39a	; 0x39a <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 3ee:	9d ec       	ldi	r25, 0xCD	; 205
 3f0:	d9 9f       	mul	r29, r25
 3f2:	c1 2d       	mov	r28, r1
 3f4:	11 24       	eor	r1, r1
 3f6:	c6 95       	lsr	r28
 3f8:	c6 95       	lsr	r28
 3fa:	c6 95       	lsr	r28
 3fc:	c9 9f       	mul	r28, r25
 3fe:	91 2d       	mov	r25, r1
 400:	11 24       	eor	r1, r1
 402:	96 95       	lsr	r25
 404:	96 95       	lsr	r25
 406:	96 95       	lsr	r25
 408:	99 0f       	add	r25, r25
 40a:	89 2f       	mov	r24, r25
 40c:	88 0f       	add	r24, r24
 40e:	88 0f       	add	r24, r24
 410:	98 0f       	add	r25, r24
 412:	8c 2f       	mov	r24, r28
 414:	89 1b       	sub	r24, r25
 416:	80 5d       	subi	r24, 0xD0	; 208
 418:	0e 94 cd 01 	call	0x39a	; 0x39a <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 41c:	cc 0f       	add	r28, r28
 41e:	8c 2f       	mov	r24, r28
 420:	88 0f       	add	r24, r24
 422:	88 0f       	add	r24, r24
 424:	c8 0f       	add	r28, r24
 426:	8d 2f       	mov	r24, r29
 428:	8c 1b       	sub	r24, r28
 42a:	80 5d       	subi	r24, 0xD0	; 208
 42c:	0e 94 cd 01 	call	0x39a	; 0x39a <transmitByte>
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <printWord>:

void printWord(uint16_t word) {
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	8c 01       	movw	r16, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 440:	9c 01       	movw	r18, r24
 442:	32 95       	swap	r19
 444:	22 95       	swap	r18
 446:	2f 70       	andi	r18, 0x0F	; 15
 448:	23 27       	eor	r18, r19
 44a:	3f 70       	andi	r19, 0x0F	; 15
 44c:	23 27       	eor	r18, r19
 44e:	a7 e4       	ldi	r26, 0x47	; 71
 450:	b3 e0       	ldi	r27, 0x03	; 3
 452:	0e 94 c9 02 	call	0x592	; 0x592 <__umulhisi3>
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	80 5d       	subi	r24, 0xD0	; 208
 464:	0e 94 cd 01 	call	0x39a	; 0x39a <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 468:	98 01       	movw	r18, r16
 46a:	36 95       	lsr	r19
 46c:	27 95       	ror	r18
 46e:	36 95       	lsr	r19
 470:	27 95       	ror	r18
 472:	36 95       	lsr	r19
 474:	27 95       	ror	r18
 476:	a5 ec       	ldi	r26, 0xC5	; 197
 478:	b0 e2       	ldi	r27, 0x20	; 32
 47a:	0e 94 c9 02 	call	0x592	; 0x592 <__umulhisi3>
 47e:	ac 01       	movw	r20, r24
 480:	52 95       	swap	r21
 482:	42 95       	swap	r20
 484:	4f 70       	andi	r20, 0x0F	; 15
 486:	45 27       	eor	r20, r21
 488:	5f 70       	andi	r21, 0x0F	; 15
 48a:	45 27       	eor	r20, r21
 48c:	9a 01       	movw	r18, r20
 48e:	ad ec       	ldi	r26, 0xCD	; 205
 490:	bc ec       	ldi	r27, 0xCC	; 204
 492:	0e 94 c9 02 	call	0x592	; 0x592 <__umulhisi3>
 496:	96 95       	lsr	r25
 498:	87 95       	ror	r24
 49a:	96 95       	lsr	r25
 49c:	87 95       	ror	r24
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	9c 01       	movw	r18, r24
 4a4:	22 0f       	add	r18, r18
 4a6:	33 1f       	adc	r19, r19
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	82 0f       	add	r24, r18
 4b6:	93 1f       	adc	r25, r19
 4b8:	9a 01       	movw	r18, r20
 4ba:	28 1b       	sub	r18, r24
 4bc:	39 0b       	sbc	r19, r25
 4be:	c9 01       	movw	r24, r18
 4c0:	80 5d       	subi	r24, 0xD0	; 208
 4c2:	0e 94 cd 01 	call	0x39a	; 0x39a <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 4c6:	98 01       	movw	r18, r16
 4c8:	36 95       	lsr	r19
 4ca:	27 95       	ror	r18
 4cc:	36 95       	lsr	r19
 4ce:	27 95       	ror	r18
 4d0:	ab e7       	ldi	r26, 0x7B	; 123
 4d2:	b4 e1       	ldi	r27, 0x14	; 20
 4d4:	0e 94 c9 02 	call	0x592	; 0x592 <__umulhisi3>
 4d8:	ac 01       	movw	r20, r24
 4da:	56 95       	lsr	r21
 4dc:	47 95       	ror	r20
 4de:	9a 01       	movw	r18, r20
 4e0:	ad ec       	ldi	r26, 0xCD	; 205
 4e2:	bc ec       	ldi	r27, 0xCC	; 204
 4e4:	0e 94 c9 02 	call	0x592	; 0x592 <__umulhisi3>
 4e8:	96 95       	lsr	r25
 4ea:	87 95       	ror	r24
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	96 95       	lsr	r25
 4f2:	87 95       	ror	r24
 4f4:	9c 01       	movw	r18, r24
 4f6:	22 0f       	add	r18, r18
 4f8:	33 1f       	adc	r19, r19
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	82 0f       	add	r24, r18
 508:	93 1f       	adc	r25, r19
 50a:	9a 01       	movw	r18, r20
 50c:	28 1b       	sub	r18, r24
 50e:	39 0b       	sbc	r19, r25
 510:	c9 01       	movw	r24, r18
 512:	80 5d       	subi	r24, 0xD0	; 208
 514:	0e 94 cd 01 	call	0x39a	; 0x39a <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 518:	98 01       	movw	r18, r16
 51a:	ad ec       	ldi	r26, 0xCD	; 205
 51c:	bc ec       	ldi	r27, 0xCC	; 204
 51e:	0e 94 c9 02 	call	0x592	; 0x592 <__umulhisi3>
 522:	ec 01       	movw	r28, r24
 524:	d6 95       	lsr	r29
 526:	c7 95       	ror	r28
 528:	d6 95       	lsr	r29
 52a:	c7 95       	ror	r28
 52c:	d6 95       	lsr	r29
 52e:	c7 95       	ror	r28
 530:	9e 01       	movw	r18, r28
 532:	0e 94 c9 02 	call	0x592	; 0x592 <__umulhisi3>
 536:	96 95       	lsr	r25
 538:	87 95       	ror	r24
 53a:	96 95       	lsr	r25
 53c:	87 95       	ror	r24
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	9c 01       	movw	r18, r24
 544:	22 0f       	add	r18, r18
 546:	33 1f       	adc	r19, r19
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	82 0f       	add	r24, r18
 556:	93 1f       	adc	r25, r19
 558:	9e 01       	movw	r18, r28
 55a:	28 1b       	sub	r18, r24
 55c:	39 0b       	sbc	r19, r25
 55e:	c9 01       	movw	r24, r18
 560:	80 5d       	subi	r24, 0xD0	; 208
 562:	0e 94 cd 01 	call	0x39a	; 0x39a <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 566:	ce 01       	movw	r24, r28
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	cc 0f       	add	r28, r28
 56e:	dd 1f       	adc	r29, r29
 570:	cc 0f       	add	r28, r28
 572:	dd 1f       	adc	r29, r29
 574:	cc 0f       	add	r28, r28
 576:	dd 1f       	adc	r29, r29
 578:	c8 0f       	add	r28, r24
 57a:	d9 1f       	adc	r29, r25
 57c:	c8 01       	movw	r24, r16
 57e:	8c 1b       	sub	r24, r28
 580:	9d 0b       	sbc	r25, r29
 582:	80 5d       	subi	r24, 0xD0	; 208
 584:	0e 94 cd 01 	call	0x39a	; 0x39a <transmitByte>
}
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <__umulhisi3>:
 592:	a2 9f       	mul	r26, r18
 594:	b0 01       	movw	r22, r0
 596:	b3 9f       	mul	r27, r19
 598:	c0 01       	movw	r24, r0
 59a:	a3 9f       	mul	r26, r19
 59c:	70 0d       	add	r23, r0
 59e:	81 1d       	adc	r24, r1
 5a0:	11 24       	eor	r1, r1
 5a2:	91 1d       	adc	r25, r1
 5a4:	b2 9f       	mul	r27, r18
 5a6:	70 0d       	add	r23, r0
 5a8:	81 1d       	adc	r24, r1
 5aa:	11 24       	eor	r1, r1
 5ac:	91 1d       	adc	r25, r1
 5ae:	08 95       	ret

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
